[{"name":"TitleRecommender","type":"agent","scope":"\/","description":"Recommends next title given a title","properties":{"image":"megagonlabs\/blue-agent-title_recommender:latest"}},{"name":"current_title","type":"input","scope":"\/TitleRecommender","description":"current job title of the job seeker","properties":{}},{"name":"next_titles","type":"output","scope":"\/TitleRecommender","description":"predicted list of next titles recommended for the job seeker with a given current_title","properties":{}},{"name":"Neo4J","type":"agent","scope":"\/","description":"Execute graph database queries against neo4j graph database","properties":{"image":"megagonlabs\/blue-agent-neo4j:latest","neo4j.user":"$NEO4J_USER","neo4j.password":"$NEO4J_PWD","neo4j.host":"$NEO4J_HOST"}},{"name":"query","type":"input","scope":"\/Neo4J","description":"neo4j cypher query","properties":{}},{"name":"result","type":"output","scope":"\/Neo4J","description":"query results from executing the input query in JSON","properties":{}},{"name":"OpenAITripleExtractor","type":"agent","scope":"\/","description":"Given a text extract entities and relations in the form of source and target entities and relationship between them using OpenAI","properties":{"image":"megagonlabs\/blue-agent-triple_extractor:latest","openai.api":"ChatCompletion","openai.model":"gpt-4","output_path":"$.choices[0].message.content","input_json":"[{\"role\":\"user\"}]","input_context":"$[0]","input_context_field":"content","input_field":"messages","input_template":"Given below schema that describe an ontology:\n{schema}\nwhere  {explanation}\n extract one triple from the below sentence in the above format in a list using only above ontology concepts, entities, relations, and properties:\n{input}","openai.temperature":0,"openai.max_tokens":256,"openai.top_p":1,"openai.frequency_penalty":0,"openai.presence_penalty":0,"schema":"","explanation":"","example":"","listens":{"includes":["USER"],"excludes":[]},"tags":["TRIPLE"]}},{"name":"text","type":"input","scope":"\/OpenAITripleExtractor","description":"text to perform triple extraction on","properties":{}},{"name":"triple","type":"output","scope":"\/OpenAITripleExtractor","description":"list of triples in the form (source:type) -[relation]-> (source:type)","properties":{}},{"name":"OpenAINeo4JQuery","type":"agent","scope":"\/","description":"Given triples with source and target entities and relationships, transform triples to neo4j querys that can be executed","properties":{"image":"megagonlabs\/blue-agent-triple2cypher:latest","openai.api":"ChatCompletion","openai.model":"gpt-4","output_path":"$.choices[0].message.content","listens":{"includes":["TRIPLE"],"excludes":[]},"tags":["CYPHER"],"input_json":"[{\"role\":\"user\"}]","input_context":"$[0]","input_context_field":"content","input_field":"messages","input_template":"Convert below triple into a MATCH CYPHER query: {input}","openai.temperature":0,"openai.max_tokens":256,"openai.top_p":1,"openai.frequency_penalty":0,"openai.presence_penalty":0}},{"name":"triple","type":"input","scope":"\/OpenAINeo4JQuery","description":"triple to transform into a match query in neo4j cypher query language","properties":{}},{"name":"query","type":"output","scope":"\/OpenAINeo4JQuery","description":"neo4j cypher query in text form","properties":{}},{"name":"Recorder","type":"agent","scope":"\/","description":"Scan JSON documents and find matched entities","properties":{"image":"megagonlabs\/blue-agent-recorder:latest","records":[]}},{"name":"paths","type":"input","scope":"\/Recorder","description":"list of JSONPath queries to execute over json document and record in memory","properties":{}},{"name":"Rationalizer","type":"agent","scope":"\/","description":"Given one or more documents representing entities explain and rationalize a relation between said documents","properties":{"image":"megagonlabs\/blue-agent-rationalizer:latest"}},{"name":"entity_1_document","type":"input","scope":"\/Rationalizer","description":"a document representing an entity","properties":{}},{"name":"entity_2_document","type":"input","scope":"\/Rationalizer","description":"a document representing an entity","properties":{}},{"name":"explanation","type":"output","scope":"\/Rationalizer","description":"a document explaining and giving rationales behind the said relationship between the input entities","properties":{}},{"name":"KnowledgeGrounding","type":"agent","scope":"\/","description":"Given a text identify missing knowledge to explain","properties":{"image":"megagonlabs\/blue-agent-knowledge_grounding:latest"}},{"name":"User","type":"agent","scope":"\/","description":"Get input from user and output for agents to process","properties":{"image":"megagonlabs\/blue-agent-user:latest"}},{"name":"text","type":"output","scope":"\/User","description":"text from user input","properties":{}},{"name":"Observer","type":"agent","scope":"\/","description":"Observe all output in a session","properties":{"image":"megagonlabs\/blue-agent-observer:latest"}},{"name":"Planner","type":"agent","scope":"\/","description":"Creates a plan as a directed-acyclic graph of agents to execute","properties":{"image":"megagonlabs\/blue-agent-planner:latest"}},{"name":"text","type":"input","scope":"\/Planner","description":"text from user input","properties":{}},{"name":"plan","type":"output","scope":"\/Planner","description":"directed-acyclic graph of agents to execute","properties":{}},{"name":"GPTPlanner","type":"agent","scope":"\/","description":"Creates a plan as a directed-acyclic graph of agents to execute utilizing GPT to create an initial draft","properties":{"image":"megagonlabs\/blue-agent-gpt_planner:latest","openai.api":"ChatCompletion","openai.model":"gpt-4","output_path":"$.choices[0].message.content","input_json":"[{\"role\":\"user\"}]","input_context":"$[0]","input_context_field":"content","input_field":"messages","input_template":"Examine the text below and identify a task plan  thatcan be fulfilled by various agents. Specify plan in JSON format, where each agent has attributes of name, description, input and output parameters with names and descriptions: \n{input}","openai.temperature":0,"openai.max_tokens":1024,"openai.top_p":1,"openai.frequency_penalty":0,"openai.presence_penalty":0,"registry.name":"default","listens":{"includes":["USER"],"excludes":[]},"tags":["PLAN"]}},{"name":"text","type":"input","scope":"\/Planner","description":"text from user input","properties":{}},{"name":"plan","type":"output","scope":"\/Planner","description":"directed-acyclic graph of agents to execute","properties":{}},{"name":"Postgres","type":"agent","scope":"\/","description":"Execute relational database queries against postgres database","properties":{"image":"megagonlabs\/blue-agent-postgres:latest","postgres.host":"$POSTGRES_HOST","postgres.port":5432,"postgres.database":"default","input_json":null,"input_context":null,"input_context_field":null,"input_field":"query","input_template":"select row_to_json(row) from ({input}) row;","output_path":"$.results"}},{"name":"query","type":"input","scope":"\/Postgres","description":"postgres sql query","properties":{}},{"name":"result","type":"output","scope":"\/Postgres","description":"query results from executing the input query in JSON","properties":{}},{"name":"ChatGPT","type":"agent","scope":"\/","description":"Gets results from executing input text through ChatGPT","properties":{"image":"megagonlabs\/blue-agent-chatgpt:latest","openai.api":"ChatCompletion","openai.model":"gpt-4","output_path":"$.choices[0].message.content","input_json":"[{\"role\":\"user\"}]","input_context":"$[0]","input_context_field":"content","input_field":"messages","listens":{"includes":["USER"],"excludes":[]},"tags":["CHAT"]}},{"name":"text_input","type":"input","scope":"\/ChatGPT","description":"text input","properties":{}},{"name":"text_output","type":"output","scope":"\/ChatGPT","description":"text output","properties":{}},{"name":"OpenAISQLQuery","type":"agent","scope":"\/","description":"Given user query in text, transform it to sql query that can be executed","properties":{"image":"megagonlabs\/blue-agent-nl2sql:latest","openai.api":"Completion","openai.model":"text-davinci-003","output_path":"$.choices[0].text","input_field":"prompt","input_template":"### Postgres SQL tables, with their properties:\n#\n{schema}\n#\n### A query to {input}\nSELECT","output_template":"SELECT {output}","openai.temperature":0,"openai.max_tokens":150,"openai.top_p":1,"openai.frequency_penalty":0,"openai.presence_penalty":0,"openai.stop":["#",";"],"listens":{"includes":["USER"],"excludes":[]},"tags":["SQL"]}},{"name":"text","type":"input","scope":"\/OpenAISQLQuery","description":"input text that can be transformed into query","properties":{}},{"name":"query","type":"output","scope":"\/OpenAISQLQuery","description":"sql query in text form","properties":{}},{"name":"OpenAI","type":"agent","scope":"\/","description":"Gets results from executing input text through OpenAI models that can be configured","properties":{"image":"megagonlabs\/blue-agent-openai:latest","openai.api":"Completion","openai.model":"text-davinci-003","input_json":null,"input_context'":null,"input_context_field":null,"input_field":"prompt","output_path":"$.choices[0].text","openai.stream":false,"openai.max_tokens":50,"service.prefix":"openai","listens":{"includes":["USER"],"excludes":[]},"tags":["AI"]}},{"name":"text_input","type":"input","scope":"\/OpenAI","description":"text input","properties":{}},{"name":"text_output","type":"output","scope":"\/OpenAI","description":"text output","properties":{}}]