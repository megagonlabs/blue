[{"name": "FORM", "type": "agent", "scope": "/", "description": "Generic agent that displays a form associated with data of specific schema. Form is displayed when triggered and collects data from the user, by rendering a user interface. When form is submitted the data collected from the form is output as JSON data.", "properties": {"form": {"type": "VerticalLayout", "elements": [{"type": "Control", "label": "First Name", "scope": "#/properties/name"}]}, "schema": {"type": "object", "properties": {"name": {"type": "string"}}}, "image": "megagonlabs/blue-agent-form:v0.9.82cadb5", "tags": ["JSON"]}}, {"name": "Neo4J", "type": "agent", "scope": "/", "description": "Execute graph database queries against neo4j graph database", "properties": {"image": "megagonlabs/blue-agent-neo4j:v0.9.82cadb5", "neo4j.user": "$NEO4J_USER", "neo4j.password": "$NEO4J_PWD", "neo4j.host": "$NEO4J_HOST"}}, {"name": "OpenAITripleExtractor", "type": "agent", "scope": "/", "description": "Given a text extract entities and relations in the form of source and target entities and relationship between them using OpenAI", "properties": {"image": "megagonlabs/blue-agent-triple_extractor:v0.9.a3aa35f", "openai.api": "ChatCompletion", "openai.model": "gpt-4", "output_path": "$.choices[0].message.content", "input_json": "[{\"role\":\"user\"}]", "input_context": "$[0]", "input_context_field": "content", "input_field": "messages", "input_template": "Given below schema that describe an ontology:\n{schema}\nwhere  {explanation}\n extract one triple from the below sentence in the above format in a list using only above ontology concepts, entities, relations, and properties:\n{input}", "openai.temperature": 0, "openai.max_tokens": 256, "openai.top_p": 1, "openai.frequency_penalty": 0, "openai.presence_penalty": 0, "schema": "(PERSON {name,age,id})\n(JOB {from,to,company,title,description})\n(RESUME {date,content,id})\nand relations:\n(PERSON) --[HAS]-> (RESUME)\n(RESUME)--[CONTAINS]->(JOB)\n", "explanation": "PERSON, JOB, and RESUME are Concepts,\nHAS is a Relation between PERSON and RESUME,  CONTAINS is a Relation between RESUME and JOB,\nname, age are properties of PERSON and  date, content are properties of RESUME, \n(PERSON {name: \"Michael Gibbons\"})--[HAS]-> (RESUME),\n(RESUME) --[CONTAINS]->(JOB {title:  \"software engineer\"}) are example triples \n", "example": "(PERSON {name: \"Michael Gibbons\"})--[HAS]-> (RESUME)", "listens": {"includes": ["USER"], "excludes": []}, "tags": ["TRIPLE"]}}, {"name": "OpenAINeo4JQuery", "type": "agent", "scope": "/", "description": "Given triples with source and target entities and relationships, transform triples to neo4j querys that can be executed", "properties": {"image": "megagonlabs/blue-agent-triple2cypher:v0.9.a3aa35f", "openai.api": "ChatCompletion", "openai.model": "gpt-4", "output_path": "$.choices[0].message.content", "listens": {"includes": ["TRIPLE"], "excludes": []}, "tags": ["CYPHER"], "input_json": "[{\"role\":\"user\"}]", "input_context": "$[0]", "input_context_field": "content", "input_field": "messages", "input_template": "Convert below triple into a MATCH CYPHER query: {input}", "openai.temperature": 0, "openai.max_tokens": 256, "openai.top_p": 1, "openai.frequency_penalty": 0, "openai.presence_penalty": 0}}, {"name": "Recorder", "type": "agent", "scope": "/", "description": "Scan JSON documents and find matched entities", "properties": {"image": "megagonlabs/blue-agent-recorder:v0.9.a3aa35f", "records": [{"variable": "title", "single": true, "query": "$[0]['res']['current_title']"}, {"variable": "top_title_recommendation", "single": true, "query": "$['title_recommendations'][1]"}, {"variable": "name", "single": true, "query": "$.name"}, {"variable": "resume_skills", "single": true, "query": "$['resume_skills']"}, {"variable": "top_title_skills", "single": true, "query": "$['top_title_skills']"}]}}, {"name": "KNOCKKNOCK", "type": "agent", "scope": "/", "description": "template agent to demonstrate interactive agents with UI, try it out by saying \"knock knock\"", "properties": {"image": "megagonlabs/blue-agent-template-interactive:v0.9.82cadb5", "listens": {"includes": ["USER"], "excludes": []}}}, {"name": "OpenAI", "type": "agent", "scope": "/", "description": "Gets results from executing input text through OpenAI models that can be configured", "properties": {"image": "megagonlabs/blue-agent-openai:v0.9.dbf6feb", "openai.api": "Completion", "openai.model": "text-davinci-003", "input_json": null, "input_context'": null, "input_context_field": null, "input_field": "prompt", "output_path": "$.choices[0].text", "openai.stream": false, "openai.max_tokens": 50, "service.prefix": "openai", "listens": {"includes": ["USER"], "excludes": []}, "tags": ["AI"]}}, {"name": "WEBSOCKETCOUNTER", "type": "agent", "scope": "/", "description": "WebSocket based implementation of a basic word counter", "properties": {"image": "megagonlabs/blue-agent-websocket_counter:v0.9.a3aa35f"}}, {"name": "OpenAISQLQuery", "type": "agent", "scope": "/", "description": "Given user query in text, transform it to sql query that can be executed", "properties": {"image": "megagonlabs/blue-agent-nl2sql:v0.9.dbf6feb", "openai.api": "Completion", "openai.model": "gpt-3.5-turbo-instruct", "output_path": "$.choices[0].text", "input_field": "prompt", "input_template": "### Postgres SQL tables, with their properties:\n#\n{schema}\n#\n### A query to {input}\nSELECT", "output_template": "SELECT {output}", "openai.temperature": 0, "openai.max_tokens": 150, "openai.top_p": 1, "openai.frequency_penalty": 0, "openai.presence_penalty": 0, "openai.stop": ["#", ";"], "listens": {"includes": ["USER"], "excludes": []}, "tags": ["SQL"], "openai.service": "ws://blue_service_openai:8001"}}, {"name": "JobSearch", "type": "agent", "scope": "/", "description": "Search job descriptions database given keywords", "properties": {"image": "megagonlabs/blue-agent-job_search:v0.9.82cadb5", "job_search.db.user": "postgres", "job_search.db.host": "10.0.160.75", "job_search.db.pwd": "example", "job_search.test": "abc"}}, {"name": "ChatGPT", "type": "agent", "scope": "/", "description": "Gets results from executing input text through ChatGPT", "properties": {"image": "megagonlabs/blue-agent-chatgpt:v0.9.a3aa35f", "openai.api": "ChatCompletion", "openai.model": "gpt-4", "output_path": "$.choices[0].message.content", "input_json": "[{\"role\":\"user\"}]", "input_context": "$[0]", "input_context_field": "content", "input_field": "messages", "listens": {"includes": ["USER"], "excludes": []}, "tags": ["CHAT"]}}, {"name": "USER", "type": "agent", "scope": "/", "description": "Get input from user and output for agents to process", "properties": {"image": "megagonlabs/blue-agent-user:v0.9.82cadb5"}}, {"name": "OBSERVER", "type": "agent", "scope": "/", "description": "Observe all output in a session", "properties": {"image": "megagonlabs/blue-agent-observer:v0.9.82cadb5"}}, {"name": "Coordinator", "type": "agent", "scope": "/", "description": "Coordinates execution of a plan defined as a directed-acyclic graph of agents to execute", "properties": {"image": "megagonlabs/blue-agent-coordinator:v0.9.a3aa35f"}}, {"name": "GPTPlanner", "type": "agent", "scope": "/", "description": "Creates a plan as a directed-acyclic graph of agents to execute utilizing GPT to create an initial draft", "properties": {"image": "megagonlabs/blue-agent-gpt_planner:v0.9.82cadb5", "openai.api": "ChatCompletion", "openai.model": "gpt-4", "output_path": "$.choices[0].message.content", "input_json": "[{\"role\":\"user\"}]", "input_context": "$[0]", "input_context_field": "content", "input_field": "messages", "input_template": "Examine the text below and identify a task plan  thatcan be fulfilled by various agents. Specify plan in JSON format, where each agent has attributes of name, description, input and output parameters with names and descriptions: \n{input}", "openai.temperature": 0, "openai.max_tokens": 1024, "openai.top_p": 1, "openai.frequency_penalty": 0, "openai.presence_penalty": 0, "registry.name": "default", "listens": {"includes": ["USER"], "excludes": []}, "tags": ["PLAN"]}}, {"name": "Postgres", "type": "agent", "scope": "/", "description": "Execute relational database queries against postgres database", "properties": {"image": "megagonlabs/blue-agent-postgres:v0.9.82cadb5", "postgres.host": "$POSTGRES_HOST", "postgres.port": 5432, "postgres.database": "default", "input_json": null, "input_context": null, "input_context_field": null, "input_field": "query", "input_template": "select row_to_json(row) from ({input}) row;", "output_path": "$.results"}}, {"name": "query", "type": "input", "scope": "/Neo4J", "description": "neo4j cypher query", "properties": {}}, {"name": "result", "type": "output", "scope": "/Neo4J", "description": "query results from executing the input query in JSON", "properties": {}}, {"name": "text", "type": "input", "scope": "/OpenAITripleExtractor", "description": "text to perform triple extraction on", "properties": {}}, {"name": "triple", "type": "output", "scope": "/OpenAITripleExtractor", "description": "list of triples in the form (source:type) -[relation]-> (source:type)", "properties": {}}, {"name": "triple", "type": "input", "scope": "/OpenAINeo4JQuery", "description": "triple to transform into a match query in neo4j cypher query language", "properties": {}}, {"name": "query", "type": "output", "scope": "/OpenAINeo4JQuery", "description": "neo4j cypher query in text form", "properties": {}}, {"name": "paths", "type": "input", "scope": "/Recorder", "description": "list of JSONPath queries to execute over json document and record in memory", "properties": {}}, {"name": "text_input", "type": "input", "scope": "/OpenAI", "description": "text input", "properties": {}}, {"name": "text_output", "type": "output", "scope": "/OpenAI", "description": "text output", "properties": {}}, {"name": "text", "type": "input", "scope": "/OpenAISQLQuery", "description": "input text that can be transformed into query", "properties": {}}, {"name": "query", "type": "output", "scope": "/OpenAISQLQuery", "description": "sql query in text form", "properties": {}}, {"name": "keywords", "type": "input", "scope": "/JobSearch", "description": "keywords to query and search the job description database", "properties": {}}, {"name": "jobs", "type": "output", "scope": "/JobSearch", "description": "list of jobs descriptions matching job search query keywords", "properties": {}}, {"name": "text_input", "type": "input", "scope": "/ChatGPT", "description": "text input", "properties": {}}, {"name": "text_output", "type": "output", "scope": "/ChatGPT", "description": "text output", "properties": {}}, {"name": "text", "type": "output", "scope": "/USER", "description": "text from user input", "properties": {}}, {"name": "query", "type": "input", "scope": "/Postgres", "description": "postgres sql query", "properties": {}}, {"name": "result", "type": "output", "scope": "/Postgres", "description": "query results from executing the input query in JSON", "properties": {}}]
