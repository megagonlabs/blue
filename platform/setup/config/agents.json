[
  {
    "name": "RECORDER",
    "type": "agent",
    "scope": "/",
    "description": "Scans streams containing JSON documents to find matching records to given JSONPATH query. Record signatures are declared in the records property where each record with the following properties: variable (name of the variable), query (jsonpath query to match), and single (matching mode). variable is the name to assign to the matched data, query is the JSONPATH query to execute on JSON objects in the stream, and single when set to True only returns a single element, otherwise query returns a JSONArray if matched. If matches are found they are emitted to the output stream as well as recorded in the session memory. ",
    "created_by": null,
    "properties": {
      "image": "megagonlabs/blue-agent-recorder:v0.9",
      "records": [],
      "display_name": "Recorder Agent",
      "categories": [
        "BASE"
      ],
      "tags": {},
      "listens": {
        "DEFAULT": {
          "includes": [
            "JSON"
          ],
          "excludes": []
        }
      }
    },
    "icon": "scanner-gun:#1C2127"
  },
  {
    "name": "COORDINATOR",
    "type": "agent",
    "scope": "/",
    "description": "Coordinates the execution of a plan defined as a directed-acyclic graph of agents by monitoring input and output streams from agents in the plan, issuing instructions to agents to execute. This is a system agent",
    "created_by": null,
    "properties": {
      "image": "megagonlabs/blue-agent-coordinator:v0.9",
      "tags": {
        "DEFAULT": [
          "INSTRUCTION",
          "HIDDEN"
        ]
      },
      "listens": {
        "DEFAULT": {
          "includes": [
            "PLAN"
          ],
          "excludes": []
        }
      },
      "tracker.autostart": false,
      "tracker.outputs": [
        "log.INFO"
      ],
      "display_name": "Task Coordinator Agent",
      "system_agent": true,
      "categories": [
        "SYSTEM"
      ]
    },
    "icon": "diagram-project:#1C2127"
  },
  {
    "name": "OPENAI",
    "type": "agent",
    "scope": "/",
    "description": "Constructs a prompt from properties and input collected and returns results from executing input prompt through OpenAI models that can be configured in properties.",
    "created_by": null,
    "properties": {
      "image": "megagonlabs/blue-agent-openai:v0.9",
      "openai.api": "ChatCompletion",
      "openai.model": "gpt-4o",
      "input_json": "[{\"role\": \"user\"}]",
      "display_name": "OpenAI Agent",
      "input_context_field": "content",
      "input_field": "messages",
      "output_path": "$.choices[0].message.content",
      "input_context": "$[0]",
      "openai.max_tokens": 300,
      "openai.service": "ws://blue_service_openai:8001",
      "tags": {
        "DEFAULT": [
          "AI"
        ]
      },
      "listens": {
        "DEFAULT": {
          "includes": [],
          "excludes": []
        }
      },
      "openai.frequency_penalty": 0,
      "output_transformations": [
        {
          "transformation": "replace",
          "from": "```",
          "to": ""
        },
        {
          "transformation": "replace",
          "from": "json",
          "to": ""
        }
      ],
      "input_template": "${input}",
      "openai.presence_penalty": 0,
      "openai.stop": [
        "#",
        ";"
      ],
      "openai.top_p": 1,
      "output_strip": true,
      "categories": [
        "BASE"
      ]
    },
    "icon": "aperture:#16A5A5"
  },
  {
    "name": "INPUT",
    "type": "input",
    "scope": "/OPENAI",
    "description": "Text input that will be sent to OPENAI",
    "created_by": null,
    "properties": {
      "type": "str",
      "optional": false,
      "default": null,
      "schema": null
    },
    "icon": null
  },
  {
    "name": "OUTPUT",
    "type": "output",
    "scope": "/OPENAI",
    "description": "Generated text output from OPENAI",
    "created_by": null,
    "properties": {
      "type": "str",
      "optional": false,
      "default": null,
      "schema": null
    },
    "icon": null
  },
  {
    "name": "PRESENTER",
    "type": "agent",
    "scope": "/",
    "description": "Presents a form associated with data of specific schema. Form is displayed when triggered and collects data from the user, by rendering a user interface. When form is submitted the data collected from the form is output as JSON data.",
    "created_by": null,
    "properties": {
      "form": {},
      "schema": {},
      "image": "megagonlabs/blue-agent-presenter:v0.9",
      "tags": {
        "DEFAULT": [
          "JSON"
        ]
      },
      "display_name": "Presenter Agent",
      "system_agent": false,
      "listens": {},
      "categories": [
        "BASE"
      ]
    },
    "icon": "calendar-lines:#1C2127"
  },
  {
    "name": "DEFAULT",
    "type": "output",
    "scope": "/PRESENTER",
    "description": "Form data in structured format (JSON)",
    "created_by": null,
    "properties": {
      "type": "json",
      "optional": false,
      "default": null,
      "schema": null
    },
    "icon": null
  },
  {
    "name": "PRESENTER___EXAMPLE",
    "type": "agent",
    "scope": "/PRESENTER",
    "description": "Example Presenter agent that show a form to collect user name in a form-based UI",
    "created_by": null,
    "properties": {
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "form": {
        "type": "VerticalLayout",
        "elements": [
          {
            "type": "Control",
            "label": "First Name",
            "scope": "#/properties/name"
          }
        ]
      },
      "tags": {},
      "listens": {
        "DEFAULT": {
          "includes": [
            "USER"
          ],
          "excludes": []
        }
      },
      "display_name": "Presenter Agent - Example"
    },
    "icon": null
  },
  {
    "name": "NL2SQL",
    "type": "agent",
    "scope": "/",
    "description": "Converts a natural language query to SQL, executes, and returns the result, in and end to end manner with steps including data source selection, nl2sql generation, and sql execution. Returns output as a JSON with keys `question`, `source`, `query`, `result` and `error`.",
    "created_by": null,
    "properties": {
      "image": "megagonlabs/blue-agent-nl2sql:v0.9",
      "openai.service": "ws://blue_service_openai:8001",
      "listens": {
        "DEFAULT": {
          "includes": [],
          "excludes": []
        }
      },
      "openai.model": "gpt-4o",
      "openai.max_tokens": 512,
      "openai.temperature": 0,
      "output_cast": "json",
      "input_context_field": "content",
      "system_agent": false,
      "display_name": "NL-to-SQL Agent",
      "tracker.outputs": [
        "log.INFO"
      ],
      "output_path": "$.choices[0].message.content",
      "input_field": "messages",
      "input_template": "${nl2q_prompt}",
      "input_context": "$[0]",
      "output_transformations": [
        {
          "transformation": "replace",
          "from": "```",
          "to": ""
        },
        {
          "transformation": "replace",
          "from": "json",
          "to": ""
        }
      ],
      "output_strip": true,
      "openai.api": "ChatCompletion",
      "input_json": [
        {
          "role": "user"
        }
      ],
      "nl2q_valid_query_prefixes": [
        "SELECT"
      ],
      "nl2q_discovery": true,
      "nl2q_execute": true,
      "nl2q_force_query_prefixes": [
        "SELECT"
      ],
      "nl2q_source": null,
      "nl2q_additional_requirements": [],
      "nl2q_context": [],
      "nl2q_prompt": "Your task is to translate a natural language question into a SQL query based on a list of provided data sources. \nFor each source you will be provided with a list of table schemas that specify the columns and their types. \nHere are the requirements: \n- The output should be a JSON object with the following fields \n  - \"question\": the original natural language question \n  - \"source\": the name of the data source that the query will be executed on \n  - \"query\": the SQL query that is translated from the natural language question \n- The SQL query should be compatible with the schema of the datasource. \n- The SQL query should be compatible with the syntax of the corresponding database's protocol. Examples of protocol include \"mysql\" and \"postgres\". \n- Always do case-${sensitivity} matching for string comparison. \n- The query should starts with any of the following prefixes: ${force_query_prefixes} \n- Output the JSON directly. Do not generate explanation or other additional output. \n${translation_requirements} \nProtocol: \n${protocol} \nData sources: \n${sources} \nQuestion: ${question} \nOutput:",
      "nl2q_discovery_source_protocols": [
        "postgres",
        "mysql"
      ],
      "nl2q_case_insensitive": true,
      "nl2q_source_database": null,
      "nl2q_discovery_similarity_threshold": 0.65,
      "nl2q_output_filters": ["all"],
      "nl2q_output_max_results": null,
      "tags": {
        "DEFAULT": [
          "QUERY"
        ]
      },
      "categories": [
        "BASE"
      ]
    },
    "icon": null
  },
  {
    "name": "NL2SQL___INTERACTIVE",
    "type": "agent",
    "scope": "/NL2SQL",
    "description": "Extends NL2SQL for interactive use, including listening to the USER agent directly.",
    "created_by": null,
    "properties": {
      "display_name": "NL-to-SQL Agent - Interactive",
      "openai.service": "ws://blue_service_openai:8001",
      "openai.model": "gpt-4o",
      "tags": {
        "DEFAULT": [
          "QUERY"
        ]
      },
      "listens": {
        "DEFAULT": {
          "includes": [
            "USER"
          ],
          "excludes": []
        }
      }
    },
    "icon": null
  },
  {
    "name": "NL2SQL___RESULT_ONLY",
    "type": "agent",
    "scope": "/NL2SQL",
    "description": "Extends NL2SQL, returning only results.",
    "created_by": null,
    "properties": {
      "display_name": "NL-to-SQL Agent - Result Only",
      "nl2q_output_filters": ["result"]
    },
    "icon": null
  },
  {
    "name": "NL2SQL___INTERACTIVE_RESULT_ONLY",
    "type": "agent",
    "scope": "/NL2SQL",
    "description": "Extends NL2SQL for interactive use, including listening to the USER agent directly, returning only results.",
    "created_by": null,
    "properties": {
      "display_name": "NL-to-SQL Agent - Interactive Results Only",
      "nl2q_output_filters": ["result"],
      "listens": {
        "DEFAULT": {
          "includes": [
            "USER"
          ],
          "excludes": []
        }
      }
    },
    "icon": null
  },
  {
    "name": "NL2SQL___DM",
    "type": "agent",
    "scope": "/NL2SQL",
    "description": "NL2SQL for dialogue manager example",
    "created_by": null,
    "properties": {
      "display_name": "NL-to-SQL Agent - Dialogue Manager Example",
      "nl2q_execute": false,
      "listens": {},
      "tags": {
       "DEFAULT": [
          "HIDDEN"
        ]},
      "nl2q_discovery": false,
      "nl2q_source": "postgres_example"
    },
    "icon": null
  },
  {
    "name": "REQUESTOR",
    "type": "agent",
    "scope": "/",
    "description": "Makes request on any API",
    "created_by": null,
    "properties": {
      "requestor.service": "",
      "display_name": "Requestor Agent",
      "image": "megagonlabs/blue-agent-requestor:v0.9",
      "tracker.autostart": false,
      "tracker.output": [
        "log.INFO"
      ],
      "input_context": null,
      "tags": {},
      "listens": {},
      "categories": [
        "BASE"
      ]
    },
    "icon": null
  },
  {
    "name": "SUMMARIZER",
    "type": "agent",
    "scope": "/",
    "description": "Summarizes data by executing queries and retrieving query results, and eventually passing them to OpenAI to summarize",
    "created_by": null,
    "properties": {
      "image": "megagonlabs/blue-agent-summarizer:v0.9",
      "listens": {
        "DEFAULT": {
          "includes": [],
          "excludes": [
            "USER"
          ]
        }
      },
      "queries": {},
      "template": "",
      "input_template": "Fill in template with query results in the template below, return only the summary as natural language text, rephrasing the template contents: \n${input}",
      "openai.temperature": 0,
      "openai.max_tokens": 512,
      "input_field": "messages",
      "output_path": "$.choices[0].message.content",
      "input_context": "$[0]",
      "openai.model": "gpt-4o",
      "openai.api": "ChatCompletion",
      "openai.service": "ws://blue_service_openai:8001",
      "input_context_field": "content",
      "tracker.autostart": false,
      "tracker.output.indent": 3,
      "tracker.outputs": [
        "log.INFO"
      ],
      "display_name": "Summarizer Agent",
      "categories": [
        "BASE"
      ],
      "tags": {}
    },
    "icon": null
  },
  {
    "name": "SUMMARIZER___EXAMPLE",
    "type": "agent",
    "scope": "/SUMMARIZER",
    "description": "Example Summarizer agent to summarize skills for a given job role from user input",
    "created_by": null,
    "properties": {
      "listens": {
        "DEFAULT": {
          "includes": [
            "USER"
          ],
          "excludes": []
        }
      },
      "tags": {},
      "display_name": "Summarizer Agent - Example",
      "template": "${input} role requires these skills: {% for se_skill in se_skills %} {{se_skill.skill_required}}, {% endfor %}. \n Note: Soft skills are highlighted.",
      "questions": {
        "se_skills": "what skills are required for ${input} jobs?"
      }
    },
    "icon": null
  },
  {
    "name": "QUERYEXECUTOR",
    "type": "agent",
    "scope": "/",
    "description": "Executes a query on data source",
    "created_by": null,
    "properties": {
      "image": "megagonlabs/blue-agent-query_executor:v0.9",
      "listens": {
        "DEFAULT": {
          "includes": [],
          "excludes": [
            "USER"
          ]
        }
      },
      "tags": {
        "DEFAULT": [
          "HIDDEN"
        ]
      },
      "output_filters": ["all"],
      "output_max_results":null,
      "tracker.autostart": false,
      "tracker.output": "log.INFO",
      "display_name": "Query Executor Agent",
      "system_agent": false,
      "categories": [
        "BASE"
      ]
    },
    "icon": null
  },
  {
    "name": "QUERYEXECUTOR___RESULTS_ONLY",
    "type": "agent",
    "scope": "/QUERYEXECUTOR",
    "description": "Executes a query on data source, only returning results",
    "created_by": null,
    "properties": {
      "output_filters": ["result"],
      "output_max_results":null,
      "tracker.autostart": false,
      "tracker.output": "log.INFO",
      "display_name": "Query Executor Agent - Results Only",
      "system_agent": false,
      "categories": [
        "BASE"
      ]
    },
    "icon": null
  },
  {
    "name": "VISUALIZER",
    "type": "agent",
    "scope": "/",
    "description": "Given queries or data, injected into a visualization template, substitute query results, and render a visualization as specified in the template",
    "created_by": null,
    "properties": {
      "image": "megagonlabs/blue-agent-visualizer:v0.9",
      "template": {},
      "questions": {},
      "queries": {},
      "listens": {
        "DEFAULT": {
          "includes": [],
          "excludes": []
        }
      },
      "tracker.autostart": false,
      "tracker.outputs": [
        "log.INFO"
      ],
      "display_name": "Visualizer Agent",
      "tags": {},
      "categories": [
        "BASE"
      ]
    },
    "icon": null
  },
  {
    "name": "VISUALIZER___EXAMPLE",
    "type": "agent",
    "scope": "/VISUALIZER",
    "description": "Example Visualizer agent to visualize skills by frequency from a query result",
    "created_by": null,
    "properties": {
      "template": "{\"$schema\":\"https://vega.github.io/schema/vega-lite/v5.json\",\"description\":\"Top skills required by frequency\",\"data\":{\"values\":${skills_by_frequency}},\"mark\":\"bar\",\"encoding\":{\"x\":{\"field\":\"skill_required\",\"type\":\"nominal\",\"sort\":\"-y\",\"axis\":{\"title\":\"Skill Required\"}},\"y\":{\"field\":\"frequency\",\"type\":\"quantitative\",\"axis\":{\"title\":\"Frequency\"}}},\"title\":\"Top skills required by frequency\"}",
      "questions": {
        "skills_by_frequency": "What are the top 10 skills for project manager role by frequency?"
      },
      "tags": {},
      "listens": {
        "DEFAULT": {
          "includes": [
            "USER"
          ],
          "excludes": []
        }
      },
      "display_name": "Visualizer Agent - Example"
    },
    "icon": null
  },
  {
    "name": "DOCUMENTER",
    "type": "agent",
    "scope": "/",
    "description": "Creates a data-driven document, optionally highlighting segments of the document using OpenAI",
    "created_by": null,
    "properties": {
      "image": "megagonlabs/blue-agent-documenter:v0.9",
      "template": "",
      "questions": {},
      "queries": {},
      "listens": {
        "DEFAULT": {
          "includes": [],
          "excludes": []
        }
      },
      "hilite": "",
      "tracker.autostart": false,
      "tracker.outputs": [
        "log.INFO"
      ],
      "display_name": "Document Builder Agent",
      "system_agent": false,
      "tags": {},
      "categories": [
        "BASE"
      ]
    },
    "icon": null
  },
  {
    "name": "DOCUMENTER___EXAMPLE",
    "type": "agent",
    "scope": "/DOCUMENTER",
    "description": "Example document builder agent to hilite soft skills for a given job role from user input",
    "created_by": null,
    "properties": {
      "template": "${input} role requires these skills: {% for se_skill in se_skills %} {{se_skill.skill_required}}, {% endfor %}. \n Note: Soft skills are highlighted.",
      "tracker.autostart": false,
      "hilite": "soft skills",
      "questions": {
        "se_skills": "what skills are required for ${input} jobs?"
      },
      "listens": {
        "DEFAULT": {
          "includes": [
            "USER"
          ],
          "excludes": []
        }
      },
      "tracker.outputs": [
        "log.INFO"
      ],
      "tags": {},
      "display_name": "Document Builder Agent - Example"
    },
    "icon": null
  },
  {
    "name": "BASIC_PLANNER",
    "type": "agent",
    "scope": "/",
    "description": "Planner example to demonstrate plan execution",
    "created_by": null,
    "properties": {
      "image": "megagonlabs/blue-agent-basic_planner:v0.9",
      "display_name": "Planner Agent - Example",
      "system_agent": false,
      "listens": {
        "DEFAULT": {
          "includes": [
            "USER"
          ],
          "excludes": []
        }
      },
      "tags": {},
      "categories": [
        "EXAMPLE"
      ]
    },
    "icon": null
  },
  {
    "name": "DIALOGUE_MANAGER",
    "type": "agent",
    "scope": "/",
    "description": "A dialogue manager that detects user intents and invokes matching plan.",
    "created_by": null,
    "properties": {
      "image": "megagonlabs/blue-agent-dialogue_manager:v0.9",
      "listens": {
        "DEFAULT": {
          "includes": [
            "USER"
          ],
          "excludes": []
        }
      },
      "display_name": "Dialogue Manager Agent",
      "system_agent": false,
      "intents": {},
      "categories": [
        "EXPERIMENTAL"
      ]
    },
    "icon": null
  },
  {
    "name": "DIALOGUE_MANAGER___EXAMPLE",
    "type": "agent",
    "scope": "/DIALOGUE_MANAGER",
    "description": "Example use case of dialogue manager.",
    "created_by": null,
    "properties": {
      "intents": {
        "investigate": {
          "description": "The user is requesting job market statistics or insights that can be fulfilled by a single SQL query (e.g., 'What is the average salary for data scientists in New York?').",
          "plan": [
            [
              "NL2SQL___DM",
              "DEFAULT"
            ],
            [
              "QUERYEXECUTOR",
              "DEFAULT"
            ],
            [
              "DIALOGUE_MANAGER___EXAMPLE",
              "RESULT"
            ]
          ]
        },
        "job_search": {
          "description": "The user is searching for job postings that match specific criteria (e.g., 'Show me remote software engineer jobs with at least 5 years of experience.').",
          "plan": [
            [
              "OPENAI___EXTRACTOR",
              "DEFAULT"
            ],
            [
              "NL2SQL___DM",
              "DEFAULT"
            ],
            [
              "QUERYEXECUTOR",
              "DEFAULT"
            ],
            [
              "DIALOGUE_MANAGER___EXAMPLE",
              "RESULT"
            ]
          ]
        },
        "summarize": {
          "description": "The user wants a summary or aggregated insights over a group of job postings (e.g., 'Summarize the key skills required for product management roles in California.').",
          "plan": [
            [
              "OPENAI___EXTRACTOR",
              "DEFAULT"
            ],
            [
              "NL2SQL___DM",
              "DEFAULT"
            ],
            [
              "QUERYEXECUTOR",
              "DEFAULT"
            ],
            [
              "OPENAI___QUERY_EXPLAINER",
              "DEFAULT"
            ],
            [
              "DIALOGUE_MANAGER___EXAMPLE",
              "RESULT"
            ]
          ]
        },
        "default": {
          "description": "The user\u2019s request does not fit into any of the above categories.",
          "plan": [
            [
              "OPENAI___ROGUEAGENT",
              "DEFAULT"
            ],
            [
              "DIALOGUE_MANAGER___EXAMPLE",
              "RESULT"
            ]
          ]
        }
      },
      "listens": {
        "DEFAULT": {
          "includes": [
            "USER"
          ],
          "excludes": []
        }
      },
      "display_name": "Dialogue Manager Agent - Example",
      "intent_classifier_agent": "OPENAI___INTENT_CLASSIFIER",
      "tags": {}
    },
    "icon": null
  },
  {
    "name": "COUNTER",
    "type": "agent",
    "scope": "/",
    "description": "Counter agent example to demonstrate data processing",
    "created_by": null,
    "properties": {
      "image": "megagonlabs/blue-agent-counter:v0.9",
      "listens": {
        "DEFAULT": {
          "includes": [
            "USER"
          ],
          "excludes": []
        }
      },
      "display_name": "Counter Agent - Example",
      "tags": {},
      "categories": [
        "EXAMPLE"
      ]
    },
    "icon": null
  },
  {
    "name": "OPENAI___INTERACTIVE",
    "type": "agent",
    "scope": "/OPENAI",
    "description": "Extends OPENAI agent for interactive use, by listening to the USER agent directly.",
    "created_by": null,
    "properties": {
      "display_name": "OpenAI Agent - Interactive",
      "listens": {
        "DEFAULT": {
          "includes": [
            "USER"
          ],
          "excludes": []
        }
      },
      "icon": "aperture:#16A5A5"
    }
  },
  {
    "name": "OPENAI___EXTRACTOR",
    "type": "agent",
    "scope": "/OPENAI",
    "description": "Extracts entities, specified as a property (entities) below, using OpenAI guided by generic instructions for information extraction",
    "created_by": null,
    "properties": {
      "openai.model": "gpt-4o-mini",
      "openai.frequency_penalty": 0,
      "display_name": "OPENAI Extractor Agent",
      "openai.api": "ChatCompletion",
      "input_field": "messages",
      "openai.max_tokens": 300,
      "tags": {
        "DEFAULT": [
          "EXTRACTIONS",
          "HIDDEN"
        ]
      },
      "output_path": "$.choices[0].message.content",
      "openai.top_p": 1,
      "schema": {},
      "openai.presence_penalty": 0,
      "openai.service": "ws://blue_service_openai:8001",
      "input_json": "[{\"role\":\"user\"}]",
      "openai.stop": [
        "#",
        ";"
      ],
      "entities": "query limit, job title, salary, location, skills, years of experiences, employment_type",
      "input_template": "You are an expert in information extraction. Please extract information from the provided input that fall under below list of possible arguments. If an argument has multiple values, please return a list. Respond in a JSON format and do not add any extra explanation. If there was no information return an empty JSON format.\nList of possible arguments include but not limited to: ${entities}.\nIf the provided input contains any arguments not included in the list above, please generate the appropriate argument and extract the corresponding information.\nInput: ${input}",
      "listens": {
        "DEFAULT": {
          "includes": [],
          "excludes": [
            "USER"
          ]
        }
      },
      "input_context_field": "content",
      "input_context": "$[0]",
      "output_transformations": [
        {
          "transformation": "replace",
          "from": "```",
          "to": ""
        },
        {
          "transformation": "replace",
          "from": "json",
          "to": ""
        }
      ],
      "output_strip": true,
      "output_cast": "json"
    },
    "icon": null
  },
  {
    "name": "OPENAI___PROMPTGENERATOR",
    "type": "agent",
    "scope": "/OPENAI",
    "description": "Given a string containing an instruction for task and an input, generate a prompt for an LLM agent to solve the task given the input.",
    "created_by": null,
    "properties": {
      "openai.model": "gpt-3.5-turbo-instruct",
      "openai.top_p": 1,
      "display_name": "OPENAI Prompt Generator Agent",
      "openai.frequency_penalty": 0,
      "schema": {},
      "input_field": "prompt",
      "openai.presence_penalty": 0,
      "openai.max_tokens": 150,
      "tags": {
        "DEFAULT": [
          "PROMPT"
        ]
      },
      "openai.service": "ws://blue_service_openai:8001",
      "openai.stop": [
        "#",
        ";"
      ],
      "output_path": "$.choices[0].text",
      "openai.api": "Completion",
      "output_template": "${output}",
      "input_template": "You are a Prompt Generator Agent. Your role is to generate a clear and effective prompt for another LLM agent based on a combined input and task string. This string includes both the specific input and the task to be performed.\n\nInstructions:\n\n1. Extract the specific input and the task from the combined string.\n2. Create a precise and actionable prompt for another LLM agent based on the extracted information.\n3. Ensure the prompt is clear and provides enough context for the other LLM agent to perform the task accurately.\n4. Provide the extracted input at the end.\n\nExample:\n\nCombined String: what are the named entities in the sentence 'Tesla's battery innovations in 2023'.\n Output: Please extract named entities from the provided input.\nInput: Tesla's battery innovations in 2023\n\nTarget:\n\nCombined String: ${input}\nOutput:\n",
      "listens": {
        "DEFAULT": {
          "includes": [],
          "excludes": []
        }
      }
    },
    "icon": null
  },
  {
    "name": "OPENAI___ROGUEAGENT",
    "type": "agent",
    "scope": "/OPENAI",
    "description": "An empty LLM agent, which uses the prompt generated from a generated prompt to solve a given task.",
    "created_by": null,
    "properties": {
      "openai.top_p": 1,
      "openai.frequency_penalty": 0,
      "display_name": "OPENAI Rogue Agent",
      "openai.model": "gpt-4o-mini",
      "tags": {
        "DEFAULT": [
          "EXTRACTIONS",
          "HIDDEN"
        ]
      },
      "input_template": "${input}",
      "schema": {},
      "openai.max_tokens": 300,
      "openai.presence_penalty": 0,
      "output_path": "$.choices[0].message.content",
      "openai.service": "ws://blue_service_openai:8001",
      "listens": {
        "DEFAULT": {
          "includes": [
            "PROMPT"
          ],
          "excludes": []
        }
      },
      "openai.api": "ChatCompletion",
      "input_context_field": "content"
    },
    "icon": null
  },
  {
    "name": "OPENAI___INTENT_CLASSIFIER",
    "type": "agent",
    "scope": "/OPENAI",
    "description": "Gets results from executing input prompt through OpenAI models that can be configured in properties, as shown below.",
    "created_by": null,
    "properties": {
      "display_name": "OPENAI Intent Classifier Agent",
      "input_template": "You are an expert in intent classification and information extraction. Please identify the intent of the below user text and classify it into one of the below specified possible intents. Respond only with JSON in the following format, nothing else. JSON response format: {\"intent\": \"investigate\"}. Make sure the intent is an exact string match with one of the specified intents. ${input}",
      "tags": {
        "DEFAULT": [
          "EXTRACTIONS",
          "HIDDEN"
        ]
      },
      "listens": {
        "DEFAULT": {
          "includes": [],
          "excludes": [
            "USER"
          ]
        }
      }
    },
    "icon": null
  },
  {
    "name": "OPENAI___QUERY_EXPLAINER",
    "type": "agent",
    "scope": "/OPENAI",
    "description": "Explain a query result ",
    "created_by": null,
    "properties": {
      "display_name": "OpenAI Query Explainer Agent",
      "openai.model": "gpt-4o-mini",
      "tags": {
        "DEFAULT": [
          "EXPLANATION",
          "HIDDEN"
        ]
      },
      "listens": {
        "DEFAULT": {
          "includes": [],
          "excludes": [
            "USER"
          ]
        }
      },
      "input_template": "Given a question expressed in natural language and its corresponding sql query, along with the result of the query as below in JSON, explain the results. Return only result in natural language\n ${input}"
    },
    "icon": null
  },
  {
    "name": "OPENAI___HILITER",
    "type": "agent",
    "scope": "/OPENAI",
    "description": "Simple document hiliter using OpenAI",
    "created_by": null,
    "properties": {
      "display_name": "OPENAI Hiliter Agent",
      "openai.model": "gpt-4o",
      "openai.max_tokens": 2000,
      "tags": {
        "DEFAULT": [
          "DOC",
          "HIDDEN"
        ]
      },
      "input_field": "messages",
      "openai.api": "ChatCompletion",
      "listens": {
        "DEFAULT": {
          "includes": [],
          "excludes": [
            "USER"
          ]
        }
      },
      "openai.service": "ws://blue_service_openai:8001",
      "input_json": "[{\"role\": \"user\"}]",
      "openai.presence_penalty": 0,
      "input_context_field": "content",
      "input_template": "Given a markdown document and hilite topics in below JSON, generate an updated document in markdown format hiliting spans related to the topics in the document, return only the markdown document without explanations: ${input}",
      "input_context": "$[0]",
      "openai.top_p": 1,
      "openai.frequency_penalty": 0,
      "output_transformations": [
        {
          "transformation": "replace",
          "from": "```",
          "to": ""
        },
        {
          "transformation": "replace",
          "from": "markdown",
          "to": ""
        }
      ],
      "output_strip": true
    },
    "icon": null
  },
  {
    "name": "OPENAI___SEMANTIC_EXTRACTOR",
    "type": "agent",
    "scope": "/OPENAI",
    "description": "OPENAI Semantic Extractor Agent for extracting semantic entities from input",
    "created_by": null,
    "properties": {
        "listens": {
            "DEFAULT": {
                "includes": [
                    "USER"
                ],
                "excludes": []
            }
        },
        "input_template": "The user will provide the entities that need to be extracted and text to extract entities from.\n Your job is to process the text and extract a list of concise values for each of the entities.\n The response should be valid JSON format with the entities and extracted values. Do not add any extra explanation. If there was no extractions return an empty JSON format.\n  Here is the user input: \n entities: ${entities} \n text: ${input}",
        "tags": {},
        "entities": {
        },
        "display_name": "OPENAI Semantic Extractor Agent",
        "openai.model": "gpt-4o-mini",
        "output_strip": true,
        "output_transformations": [
            {
                "transformation": "replace",
                "from": "```",
                "to": ""
            },
            {
                "transformation": "replace",
                "from": "json",
                "to": ""
            }
        ],
        "output_cast": "json"
    },
    "icon": null
},
  {
    "name": "OPENAI___SEMANTIC_EXTRACTOR_EXAMPLE",
    "type": "agent",
    "scope": "/OPENAI",
    "description": "Example Semantic Extractor Agent to extract occupation sector, skill, and certifications",
    "created_by": null,
    "properties": {
        "listens": {
            "DEFAULT": {
                "includes": [
                    "USER"
                ],
                "excludes": []
            }
        },
        "input_template": "The user will provide the entities  that need to be extracted and text to extract entities from.\n Your job is to process the text and extract a list of concise values for each of the entities.\n The response should be valid JSON format with the entities and extracted values. Do not add any extra explanation. If there was no extractions return an empty JSON format.\n  Here is the user input: \n entities: ${entities} \n text: ${input}",
        "tags": {},
        "entities": {
            "occupation sector": "occupation sector such as education, child development, healthcare, technology",
            "skill": "list of skills for job",
            "certifications": "job related certifications"
        },
        "display_name": "OPENAI Semantic Extractor Agent - Example",
        "openai.model": "gpt-4o-mini",
        "output_strip": true,
        "output_transformations": [
            {
                "transformation": "replace",
                "from": "```",
                "to": ""
            },
            {
                "transformation": "replace",
                "from": "json",
                "to": ""
            }
        ],
        "output_cast": "json"
    },
    "icon": null
},
{
  "name": "OPENAI___SEMANTIC_FILTER",
  "type": "agent",
  "scope": "/OPENAI",
  "description": "OPENAI Semantic Filter",
  "created_by": null,
  "properties": {
      "display_name": "OPENAI Semantic Filter Agent",
      "listens": {
          "DEFAULT": {
              "includes": [
                  "USER"
              ],
              "excludes": []
          }
      },
      "tags": {},
      "openai.model": "gpt-4o-mini",
      "output_strip": true,
      "output_transformations": [
          {
              "transformation": "replace",
              "from": "```",
              "to": ""
          },
          {
              "transformation": "replace",
              "from": "json",
              "to": ""
          }
      ],
      "input_template": "The user will provide some filter conditions and text to examine filter conditions on.\n Your job is to determine whether each of the filter conditions are true or false for the given text.\n The response should be valid JSON format. Do not add any extra explanation. \n The user will provide the entities that need to be extracted and text to extract entities from.\n Your job is to process the text and extract a list of concise values for each of the entities.\n The response should be valid JSON format with the entities and extracted values. Do not add any extra explanation. If there was no extractions return an empty JSON format.\n  Here is the user input: \n filter conditions: ${filter_conditions} \n text: ${input}",
      "output_cast": "json",
      "filter_conditions": {
      }
  },
  "icon": null
},
{
  "name": "OPENAI___SEMANTIC_FILTER_EXAMPLE",
  "type": "agent",
  "scope": "/OPENAI",
  "description": "OPENAI Semantic Filter to filter soft and technical skills",
  "created_by": null,
  "properties": {
      "display_name": "OPENAI Semantic Filter Agent - Example",
      "listens": {
          "DEFAULT": {
              "includes": [
                  "USER"
              ],
              "excludes": []
          }
      },
      "tags": {},
      "openai.model": "gpt-4o-mini",
      "output_strip": true,
      "output_transformations": [
          {
              "transformation": "replace",
              "from": "```",
              "to": ""
          },
          {
              "transformation": "replace",
              "from": "json",
              "to": ""
          }
      ],
      "input_template": "The user will provide some filter conditions and text to examine filter conditions on.\n Your job is to determine whether each of the filter conditions are true or false for the given text.\n The response should be valid JSON format. Do not add any extra explanation. \n The user will provide the entities that need to be extracted and text to extract entities from.\n Your job is to process the text and extract a list of concise values for each of the entities.\n The response should be valid JSON format with the entities and extracted values. Do not add any extra explanation. If there was no extractions return an empty JSON format.\n  Here is the user input: \n filter conditions: ${filter_conditions} \n text: ${input}",
      "output_cast": "json",
      "filter_conditions": {
          "soft skills": "non-technical but important skills that enable individuals to collaborate effectively with others in a workplace",
          "technical skills": "specialized abilities, knowledge, and techniques acquired to fullfill tasks in a workplace"
      }
  },
  "icon": null
},
  {
    "name": "OPENAI___INTENT_CLASSIFIER",
    "type": "agent",
    "scope": "/openai_classifier_testing",
    "description": "string",
    "created_by": null,
    "properties": {
      "listens": {
        "DEFAULT": {
          "includes": [
            "USER"
          ],
          "excludes": []
        }
      },
      "tags": {
        "DEFAULT": [
          "EXTRACTIONS"
        ]
      }
    },
    "icon": null
  },
  {
    "name": "nl2sql_demo",
    "type": "agent_group",
    "scope": "/",
    "description": "Try out the NL2SQL agent",
    "created_by": null,
    "properties": {},
    "icon": null
  },
  {
    "name": "NL2SQL___INTERACTIVE",
    "type": "agent",
    "scope": "/nl2sql_demo",
    "description": "string",
    "created_by": null,
    "properties": {},
    "icon": null
  },
  {
    "name": "dialogue_manager_demo",
    "type": "agent_group",
    "scope": "/",
    "description": "Try out the Dialogue Manager",
    "created_by": null,
    "properties": {},
    "icon": null
  },
  {
    "name": "OPENAI___EXTRACTOR",
    "type": "agent",
    "scope": "/dialogue_manager_demo",
    "description": "",
    "created_by": null,
    "properties": {},
    "icon": null
  },
  {
    "name": "OPENAI___ROGUEAGENT",
    "type": "agent",
    "scope": "/dialogue_manager_demo",
    "description": "",
    "created_by": null,
    "properties": {},
    "icon": null
  },
  {
    "name": "COORDINATOR",
    "type": "agent",
    "scope": "/dialogue_manager_demo",
    "description": "",
    "created_by": null,
    "properties": {},
    "icon": null
  },
  {
    "name": "OPENAI___INTENT_CLASSIFIER",
    "type": "agent",
    "scope": "/dialogue_manager_demo",
    "description": "",
    "created_by": null,
    "properties": {},
    "icon": null
  },
  {
    "name": "QUERYEXECUTOR",
    "type": "agent",
    "scope": "/dialogue_manager_demo",
    "description": "",
    "created_by": null,
    "properties": {},
    "icon": null
  },
  {
    "name": "NL2SQL___DM",
    "type": "agent",
    "scope": "/dialogue_manager_demo",
    "description": "",
    "created_by": null,
    "properties": {},
    "icon": null
  },
  {
    "name": "DIALOGUE_MANAGER___EXAMPLE",
    "type": "agent",
    "scope": "/dialogue_manager_demo",
    "description": "",
    "created_by": null,
    "properties": {},
    "icon": null
  },
  {
    "name": "OPENAI___QUERY_EXPLAINER",
    "type": "agent",
    "scope": "/dialogue_manager_demo",
    "description": "",
    "created_by": null,
    "properties": {},
    "icon": null
  }
]