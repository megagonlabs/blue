[{"name": "USER", "type": "agent", "scope": "/", "description": "Represents a user interacting with other agents where output from the user agent is passed on for agents to process", "created_by": null, "properties": {"image": "megagonlabs/blue-agent-user:latest", "test": 1, "display_name": "User Agent"}, "icon": "head-side:#1C2127"}, {"name": "RECORDER", "type": "agent", "scope": "/", "description": "Scans JSON documents to find matching records to given JSONPATH query. Records are represented with the following properties: variable (name of the variable), query (jsonpath query to match), and single (matching mode). variable is the name to assign to the matched data, query is the JSONPATH query to execute ofon JSON documents, and single when set to True only returns a single element, otherwise query returns a JSONArray if matched.", "created_by": null, "properties": {"image": "megagonlabs/blue-agent-recorder:latest", "records": [], "display_name": "Recorder Agent"}, "icon": "scanner-gun:#1C2127"}, {"name": "COORDINATOR", "type": "agent", "scope": "/", "description": "Coordinates the execution of a plan defined as a directed-acyclic graph of agents by monitoring input and output streams from agents in the plan, issuing instructions to agents to execute. This is a system agent", "created_by": null, "properties": {"image": "megagonlabs/blue-agent-coordinator:latest", "tags": {"DEFAULT": ["INSTRUCTION", "HIDDEN"]}, "listens": {"DEFAULT": {"includes": ["PLAN"]}}, "tracker.autostart": false, "tracker.outputs": ["log.INFO"], "display_name": "Task Coordinator Agent"}, "icon": "diagram-project:#1C2127"}, {"name": "INTERACTIVEPLANNER", "type": "agent", "scope": "/", "description": "Creates a plan as a directed-acyclic graph of agents and their input and output parameters, presents the plan to the user for interactive validation. Once submitted executes the plan", "created_by": null, "properties": {"image": "megagonlabs/blue-agent-interactive_planner:latest", "openai.api": "ChatCompletion", "openai.model": "gpt-4", "output_path": "$.choices[0].message.content", "input_json": "[{\"role\":\"user\"}]", "input_context": "$[0]", "input_context_field": "content", "input_field": "messages", "input_template": " Examine the text below and identify a task plan that can be fulfilled by various agents, leveraging agents listed below only but not necessarily all of them. \nOutput only the plan, where each inputs and outputs from agents are paired to execute the plan, as a directed acyclic graph, in JSON, using the plan format below.\nTEXT: ${input}\n AGENTS: ${agents} \nPLAN FORMAT: [{{\"from\": \"<agent>.<output>\", \"to\":\"<agent>.<input>\"}}] \nPLAN:", "openai.temperature": 0, "openai.max_tokens": 1024, "openai.top_p": 1, "openai.frequency_penalty": 0, "openai.presence_penalty": 0, "registry.name": "default", "search.threshold": 0.085, "tags": {"DEFAULT": ["PLAN"]}, "openai.service": "ws://blue_service_openai:8001", "search.limit": 6, "display_name": "Interactive Planner Agent"}, "icon": "chart-tree-map:#0062B1"}, {"name": "summarizer_smartquery_testing", "type": "agent_group", "scope": "/", "description": "Test the performance of the smart query summarization", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {}, "icon": null}, {"name": "OPENAI", "type": "agent", "scope": "/", "description": "Constructs a prompt from properties and input collected and returns results from executing input prompt through OpenAI models that can be configured in properties.", "created_by": null, "properties": {"image": "megagonlabs/blue-agent-openai:latest", "openai.api": "ChatCompletion", "openai.model": "gpt-4o", "input_json": "[{\"role\": \"user\"}]", "display_name": "OpenAI Agent", "input_context_field": "content", "input_field": "messages", "output_path": "$.choices[0].message.content", "input_context": "$[0]", "openai.max_tokens": 300, "openai.service": "ws://blue_service_openai:8001", "tags": {"DEFAULT": ["AI"]}, "listens": {"DEFAULT": {"includes": ["USER"], "excludes": []}}, "schema": {}, "openai.frequency_penalty": 0, "output_transformations": [{"transformation": "replace", "from": "```", "to": ""}, {"transformation": "replace", "from": "json", "to": ""}], "input_template": "${input}", "openai.presence_penalty": 0, "openai.stop": ["#", ";"], "openai.top_p": 1, "output_strip": true}, "icon": "aperture:#16A5A5"}, {"name": "PRESENTER", "type": "agent", "scope": "/", "description": "Presents a form associated with data of specific schema. Form is displayed when triggered and collects data from the user, by rendering a user interface. When form is submitted the data collected from the form is output as JSON data.", "created_by": null, "properties": {"form": {"type": "VerticalLayout", "elements": [{"type": "Control", "label": "First Name", "scope": "#/properties/name"}]}, "schema": {"type": "object", "properties": {"name": {"type": "string"}}}, "image": "megagonlabs/blue-agent-presenter:latest", "tags": {"DEFAULT": ["JSON"]}, "display_name": "Presenter Agent", "system_agent": false}, "icon": "calendar-lines:#1C2127"}, {"name": "NL2CYPHER", "type": "agent", "scope": "/", "description": "Converts a natural language query to CYPHER, executes, and returns the result, in and end to end manner with steps including data source selection, nl2cypher generation, and cypher execution. Returns output as a JSON with keys `source`, `query`, `result` and `error`.", "created_by": "D8mQz2heOvhaMUsXSGKoeAwrrBq2", "properties": {"image": "megagonlabs/blue-agent-nl2cypher:latest", "openai.service": "ws://blue_service_openai:8001", "openai.model": "gpt-4o", "openai.temperature": 0, "listens": {"DEFAULT": {"includes": ["USER"], "excludes": []}}, "display_name": "NL-to-CYPHER Agent"}, "icon": null}, {"name": "NL2SQL", "type": "agent", "scope": "/", "description": "Converts a natural language query to SQL, executes, and returns the result, in and end to end manner with steps including data source selection, nl2sql generation, and sql execution. Returns output as a JSON with keys `question`, `source`, `query`, `result` and `error`.", "created_by": "D8mQz2heOvhaMUsXSGKoeAwrrBq2", "properties": {"image": "megagonlabs/blue-agent-nl2sql:latest", "openai.service": "ws://blue_service_openai:8001", "listens": {"DEFAULT": {"includes": ["USER"], "excludes": []}}, "openai.model": "gpt-4o", "openai.max_tokens": 512, "openai.temperature": 0, "output_cast": "json", "input_context_field": "content", "system_agent": false, "display_name": "NL-to-SQL Agent", "tracker.outputs": ["log.INFO"], "output_path": "$.choices[0].message.content", "input_field": "messages", "input_template": "${nl2q_prompt}", "input_context": "$[0]", "output_transformations": [{"transformation": "replace", "from": "```", "to": ""}, {"transformation": "replace", "from": "json", "to": ""}], "output_strip": true, "openai.api": "ChatCompletion", "input_json": [{"role": "user"}], "nl2q_valid_query_prefixes": ["SELECT"], "nl2q_discovery": true, "nl2q_execute": true, "nl2q_force_query_prefixes": ["SELECT"], "nl2q_source": null, "nl2q_translation_requirements": [], "nl2q_prompt": "Your task is to translate a natural language question into a SQL query based on a list of provided data sources. \nFor each source you will be provided with a list of table schemas that specify the columns and their types. \nHere are the requirements: \n- The output should be a JSON object with the following fields \n  - \"question\": the original natural language question \n  - \"source\": the name of the data source that the query will be executed on \n  - \"query\": the SQL query that is translated from the natural language question \n- The SQL query should be compatible with the schema of the datasource. \n- The SQL query should be compatible with the syntax of the corresponding database's protocol. Examples of protocol include \"mysql\" and \"postgres\". \n- Always do case-${sensitivity} matching for string comparison. \n- The query should starts with any of the following prefixes: ${force_query_prefixes} \n- Output the JSON directly. Do not generate explanation or other additional output. \n${translation_requirements} \nProtocol: \n${protocol} \nData sources: \n${sources} \nQuestion: ${question} \nOutput:", "nl2q_discovery_source_protocols": ["postgres", "mysql"], "nl2q_case_insensitive": true, "nl2q_source_database": null, "nl2q_discovery_similarity_threshold": 0.65}, "icon": null}, {"name": "REQUESTOR", "type": "agent", "scope": "/", "description": "Makes request on any API ", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"requestor.service": "ws://blue_service_openai:8001", "display_name": "Requestor Agent", "image": "megagonlabs/blue-agent-requestor:latest", "tracker.autostart": false, "tracker.output": ["log.INFO"], "input_context": null}, "icon": null}, {"name": "openai_classifier_testing", "type": "agent_group", "scope": "/", "description": "Test performance of the OPENAI___CLASSIFIER agent for  intent classification and extraction", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {}, "icon": null}, {"name": "summarizer_bruteforce_testing", "type": "agent_group", "scope": "/", "description": "Test the performance of the SUMMARIZER___BRUTEFORCE agent", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {}, "icon": null}, {"name": "SUMMARIZER", "type": "agent", "scope": "/", "description": "Summarizes data by executing queries and retrieving query results, and eventually passing them to OpenAI to summarize", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-summarizer:latest", "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "queries": {}, "template": "", "input_template": "Fill in template with query results in the template below, return only the summary as natural language text, rephrasing the template contents: \n${input}", "openai.temperature": 0, "openai.max_tokens": 512, "input_field": "messages", "output_path": "$.choices[0].message.content", "input_context": "$[0]", "openai.model": "gpt-4o", "openai.api": "ChatCompletion", "openai.service": "ws://blue_service_openai:8001", "input_context_field": "content", "tracker.autostart": false, "tracker.output.indent": 3, "tracker.outputs": ["log.INFO"], "display_name": "Summarizer Agent"}, "icon": null}, {"name": "CLUSTERER", "type": "agent", "scope": "/", "description": "Runs clustering algorithm over a dataset resulting from the execution of a query. Optionally labels and summarizes each cluster. Returns cluster info and cluster mappings in JSON.", "created_by": "RMKX3vPR7XhKHhy5eu7Av5nui2F2", "properties": {"image": "megagonlabs/blue-agent-clusterer:latest", "tracker.autostart": false, "tracker.outputs": ["log.INFO"], "display_name": "Clustering Agent"}, "icon": null}, {"name": "agentic_employer", "type": "agent_group", "scope": "/", "description": "Help me identify top talent for my JDs!", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {}, "icon": "user-magnifying-glass:#0062B1"}, {"name": "QUERYEXECUTOR", "type": "agent", "scope": "/", "description": "Executes a query on data source", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-query_executor:latest", "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "tags": {"DEFAULT": ["HIDDEN"]}, "tracker.autostart": false, "tracker.output": "log.INFO", "display_name": "Query Executor Agent", "system_agent": false}, "icon": null}, {"name": "VISUALIZER", "type": "agent", "scope": "/", "description": "Given queries or data, injected into a visualization template, substitute query results, and render a visualization as specified in the template", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-visualizer", "template": {"$schema": "https://vega.github.io/schema/vega-lite/v5.json", "description": "${description}", "title": {"text": ["${chart_title}"], "align": "center"}, "data": {"values": [{"x": 2, "y": 3}]}, "mark": "bar", "encoding": {"x": {"field": "x", "type": "quantitative", "axis": {"labelAngle": 0}, "title": "${x_title}"}, "y": {"field": "y", "type": "quantitative", "title": "${y_title}"}}}, "chart_title": "Title", "description": "Description", "x_title": "X", "y_title": "Y", "listens": {"DEFAULT": {"includes": ["USER"], "excludes": []}}, "tracker.autostart": false, "tracker.outputs": ["log.INFO"], "display_name": "Visualizer Agent"}, "icon": null}, {"name": "DOCUMENTER", "type": "agent", "scope": "/", "description": "Creates a data-driven document, optionally highlighting segments of the document using OpenAI", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-documenter", "template": "This is a jinja template with references to data from the queries: There are $num_jobs many jobs", "questions": {}, "queries": {"num_jobs": {"source": "/job_search_postgres/postgres/public", "query": "SELECT COUNT(*) from jobs"}}, "listens": {"DEFAULT": {"includes": ["USER"], "excludes": []}}, "hilite": "topics to highlight", "tracker.autostart": false, "tracker.outputs": ["log.INFO"], "display_name": "Document Builder Agent", "system_agent": false}, "icon": null}, {"name": "AGENTICEMPLOYER", "type": "agent", "scope": "/", "description": "Agentic employer agent to help employers sift through applicants through smart queries, visualizations, and summarization. This is a demo application agent.", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-agentic_employer:latest", "listens": {"DEFAULT": {"includes": ["USER"], "excludes": []}, "CLUSTER_INFO_RESULTS": {"includes": ["CLUSTER_INFO"], "excludes": []}, "CLUSTER_MAPPINGS_RESULTS": {"includes": ["CLUSTER_MAPPINGS"], "excludes": []}}, "tags": {"PLAN": ["HIDDEN"], "SESSION_DATA": ["HIDDEN"], "QUERY": ["HIDDEN"], "FORM": ["WORKSPACE_ONLY"]}, "lists": {"source": "/employer_postgres/employer/public", "query": "SELECT * from job_seeker_list"}, "queries": {"job_posting_job_seeker_last_experience": {"source": "/employer_postgres/employer/public", "query": "SELECT job_seeker_id, job_seeker_title, job_seeker_company  FROM job_seeker WHERE job_seeker_id IN (SELECT job_seeker_id FROM job_seeker_applied_to_job_posting WHERE job_posting_id = ${JOB_POSTING_ID}) ORDER by job_seeker_id, experience_id DESC"}, "job_posting_job_seeker_lists": {"source": "/employer_postgres/employer/public", "query": "SELECT * FROM job_posting_job_seeker_lists WHERE job_posting_id = ${JOB_POSTING_ID}"}, "matched_job_posting_seeker_skills": {"source": "/employer_postgres/employer/public", "query": "SELECT * FROM matched_job_posting_seeker_skills WHERE job_posting_id = ${JOB_POSTING_ID} and job_seeker_id IN (SELECT job_seeker_id FROM job_seeker_applied_to_job_posting WHERE job_posting_id = ${JOB_POSTING_ID}) ORDER by job_seeker_id, job_posting_skill"}}, "job_postings": {"source": "/employer_postgres/employer/public", "query": "SELECT job_posting_id, job_posting_title, job_posting_company FROM job_posting"}, "move_job_seeker_to_list": {"source": "/employer_postgres/employer/public", "query": "BEGIN; DELETE FROM job_posting_job_seeker_lists WHERE job_posting_id=${JOB_POSTING_ID} AND job_seeker_id=${JOB_SEEKER_ID} and list_id in (${FROM_LIST}); INSERT INTO job_posting_job_seeker_lists (job_posting_id, job_seeker_id, list_id) VALUES (${JOB_POSTING_ID}, ${JOB_SEEKER_ID}, ${TO_LIST}); COMMIT;"}, "job_seekers_in_list": {"source": "/employer_postgres/employer/public", "query": "SELECT job_seeker_id FROM job_posting_job_seeker_lists WHERE job_posting_id = ${JOB_POSTING_ID} and list_id = ${LIST_ID}"}, "actions": {"JOB_SEEKER": {"VIEW": {"name": "VIEW", "label": "View", "plan": [["self", "DOCUMENTER___JOBSEEKER.DEFAULT"]]}}, "JD": {"VIEW": {"name": "VIEW", "label": "View", "plan": [["self", "DOCUMENTER___JD.DEFAULT"]]}}, "LIST": {"SUMMARIZE": {"name": "SUMMARIZE", "label": "Summarize", "input": "SELECT job_seeker_id FROM job_posting_job_seeker_lists WHERE job_posting_id = ${JOB_POSTING_ID} and list_id = ${LIST_ID}", "plan": [["self", "SUMMARIZER___LIST.DEFAULT"]]}, "VISUALIZESKILLSOVERVIEW": {"name": "VISUALIZESKILLSOVERVIEW", "label": "Skills Overview", "input": "SELECT job_seeker_id FROM job_posting_job_seeker_lists WHERE job_posting_id = ${JOB_POSTING_ID} and list_id = ${LIST_ID}", "plan": [["self", "VISUALIZER___SKILLS.DEFAULT"]]}, "VISUALIZESKILLSJOBSEEKER": {"name": "VISUALIZESKILLSJOBSEEKER", "label": "Skills by Candidate", "input": "SELECT job_seeker_id FROM job_posting_job_seeker_lists WHERE job_posting_id = ${JOB_POSTING_ID} and list_id = ${LIST_ID}", "plan": [["self", "VISUALIZER___SKILLBYCANDIDATE.DEFAULT"]]}}, "CLUSTER": {"SUMMARIZE": {"name": "SUMMARIZE", "label": "Summarize", "plan": [["self", "SUMMARIZER___LIST.DEFAULT"]]}, "VISUALIZESKILLSOVERVIEW": {"name": "VISUALIZESKILLSOVERVIEW", "label": "Skills Overview", "plan": [["self", "VISUALIZER___SKILLS.DEFAULT"]]}, "VISUALIZESKILLSJOBSEEKER": {"name": "VISUALIZESKILLSJOBSEEKER", "label": "Skills by Candidate", "plan": [["self", "VISUALIZER___SKILLBYCANDIDATE.DEFAULT"]]}}}, "tracker.autostart": false, "tracker.outputs": ["log.INFO"], "display_name": "Agentic Employer Agent"}, "icon": null}, {"name": "nl2sql_testing", "type": "agent_group", "scope": "/", "description": "Test performance of the NL2SQL (Employer PostgresDB)", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {}, "icon": null}, {"name": "summarizer_recent_testing", "type": "agent_group", "scope": "/", "description": "Test the performance of the SUMMARIZER___RECENT agent", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {}, "icon": null}, {"name": "INTENTCLASSIFIER", "type": "agent", "scope": "/", "description": "", "created_by": "RMKX3vPR7XhKHhy5eu7Av5nui2F2", "properties": {"image": "megagonlabs/blue-agent-intent_classifier:latest", "openai.model": "gpt-4", "output_path": "$.choices[0].message.content", "openai.presence_penalty": 0, "input_context": "$[0]", "input_field": "messages", "registry.name": "default", "openai.api": "ChatCompletion", "openai.frequency_penalty": 0, "search.threshold": 0.085, "display_name": "Intent Classifier Agent", "input_json": [{"role": "user"}], "openai.temperature": 0, "tags": {"DEFAULT": ["PLAN"]}, "search.limit": 6, "input_context_field": "content", "openai.top_p": 1, "openai.service": "ws://blue_service_openai:8001", "input_template": "Return valid JSON text such as {\"plan\": \"empty\"}.", "openai.max_tokens": 1024}, "icon": null}, {"name": "BASIC_PLANNER", "type": "agent", "scope": "/", "description": "Basic planner to demonstrate Plan object functionality", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-basic_planner", "display_name": "Basic Planner", "system_agent": false, "listens": {"DEFAULT": {"includes": ["USER"], "excludes": []}}}, "icon": null}, {"name": "DialogManager", "type": "agent", "scope": "/", "description": "", "created_by": "RMKX3vPR7XhKHhy5eu7Av5nui2F2", "properties": {"image": "megagonlabs/blue-agent-dialogue_manager:latest", "listens": {"DEFAULT": {"includes": ["USER"], "excludes": []}}, "display_name": "Dialog Manager", "system_agent": true, "intents": "[{\"name\": \"investigate\", \"description\": \"Execute a query on a database by calling an NL2SQL agent and get the raw data.\"}, {\"name\": \"job_search\", \"description\": \"Search for jobs that meet certain requirements.\"}, {\"name\": \"summarize\", \"description\": \"Execute a query on a database by calling an NL2SQL agent and view a generated summary of the data.\"}, {\"name\": \"default\", \"description\": \"Not one of the other specified intents, simply pass the input on to a chatbot.\"}]"}, "icon": null}, {"name": "BASIC_COUNTER", "type": "agent", "scope": "/", "description": "test basic counter example", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-counter:latest", "listens": {}}, "icon": null}, {"name": "DialogManagerGroup", "type": "agent_group", "scope": "/", "description": "Test the Dialog Manager", "created_by": "RMKX3vPR7XhKHhy5eu7Av5nui2F2", "properties": {}, "icon": null}, {"name": "TEXT", "type": "output", "scope": "/USER", "description": "Output text from the user interaction", "created_by": null, "properties": {"type": "str", "optional": false, "default": null, "schema": null}, "icon": null}, {"name": "QUERYEXECUTOR", "type": "agent", "scope": "/summarizer_smartquery_testing", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "NL2SQL___INPLAN", "type": "agent", "scope": "/summarizer_smartquery_testing", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "COORDINATOR", "type": "agent", "scope": "/summarizer_smartquery_testing", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "SUMMARIZER___SMARTQUERY", "type": "agent", "scope": "/summarizer_smartquery_testing", "description": "string", "created_by": null, "properties": {"listens": {"DEFAULT": {"includes": ["USER"], "excludes": []}}, "JOB_POSTING_ID": 2003}, "icon": null}, {"name": "OPENAI___EXTRACTOR", "type": "agent", "scope": "/OPENAI", "description": "Extracts entities, specified as a property (entities) below, using OpenAI guided by generic instructions for information extraction", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"openai.model": "gpt-4o-mini", "openai.frequency_penalty": 0, "image": "megagonlabs/blue-agent-openai:latest", "openai.api": "ChatCompletion", "input_field": "messages", "openai.max_tokens": 300, "tags": {"DEFAULT": ["EXTRACTIONS"]}, "output_path": "$.choices[0].message.content", "openai.top_p": 1, "schema": {}, "openai.presence_penalty": 0, "openai.service": "ws://blue_service_openai:8001", "input_json": "[{\"role\":\"user\"}]", "openai.stop": ["#", ";"], "entities": "Name, Contact Information, Nationality, Degree, University, Institution, Duration, Achievement, Project, Skills, Job Title, Company, Organization, Location, Date, Product, Event, Language", "input_template": "You are an expert in information extraction. Please extract information from the provided input that fall under below list of possible arguments. If an argument has multiple values, please return a list. Respond in a JSON format and do not add any extra explanation. If there was no information return an empty JSON format.\nList of possible arguments include but not limited to: ${entities}.\nIf the provided input contains any arguments not included in the list above, please generate the appropriate argument and extract the corresponding information.\nInput: ${input}", "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "input_context_field": "content", "input_context": "$[0]", "output_transformations": [{"transformation": "replace", "from": "```", "to": ""}, {"transformation": "replace", "from": "json", "to": ""}], "output_strip": true, "output_cast": "json"}, "icon": null}, {"name": "OPENAI___PROMPTGENERATOR", "type": "agent", "scope": "/OPENAI", "description": "Given a string containing an instruction for task and an input, generate a prompt for an LLM agent to solve the task given the input.", "created_by": "wP6D9D9GOQeRqN56QJ6wxYOl3n62", "properties": {"openai.model": "gpt-3.5-turbo-instruct", "openai.top_p": 1, "image": "megagonlabs/blue-agent-openai:latest", "openai.frequency_penalty": 0, "schema": {}, "input_field": "prompt", "openai.presence_penalty": 0, "openai.max_tokens": 150, "tags": {"DEFAULT": ["PROMPT"]}, "openai.service": "ws://blue_service_openai:8001", "openai.stop": ["#", ";"], "output_path": "$.choices[0].text", "openai.api": "Completion", "output_template": "${output}", "input_template": "You are a Prompt Generator Agent. Your role is to generate a clear and effective prompt for another LLM agent based on a combined input and task string. This string includes both the specific input and the task to be performed.\n\nInstructions:\n\n1. Extract the specific input and the task from the combined string.\n2. Create a precise and actionable prompt for another LLM agent based on the extracted information.\n3. Ensure the prompt is clear and provides enough context for the other LLM agent to perform the task accurately.\n4. Provide the extracted input at the end.\n\nExample:\n\nCombined String: what are the named entities in the sentence 'Tesla's battery innovations in 2023'.\n Output: Please extract named entities from the provided input.\nInput: Tesla's battery innovations in 2023\n\nTarget:\n\nCombined String: ${input}\nOutput:\n", "listens": {"DEFAULT": {"includes": ["USER"], "excludes": []}}}, "icon": null}, {"name": "OPENAI___ROGUEAGENT", "type": "agent", "scope": "/OPENAI", "description": "An empty LLM agent, which uses the prompt generated from a generated prompt to solve a given task.", "created_by": "wP6D9D9GOQeRqN56QJ6wxYOl3n62", "properties": {"openai.top_p": 1, "openai.frequency_penalty": 0, "image": "megagonlabs/blue-agent-openai:latest", "openai.model": "gpt-4o-mini", "tags": {"DEFAULT": ["EXTRACTIONS"]}, "input_template": "${input}", "schema": {}, "openai.max_tokens": 300, "openai.presence_penalty": 0, "output_path": "$.choices[0].message.content", "openai.service": "ws://blue_service_openai:8001", "listens": {"DEFAULT": {"includes": ["PROMPT"], "excludes": []}}, "openai.api": "ChatCompletion", "input_context_field": "content"}, "icon": null}, {"name": "OPENAI___CLASSIFIER", "type": "agent", "scope": "/OPENAI", "description": "Gets results from executing input prompt through OpenAI models that can be configured in properties, as shown below.", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-openai:latest", "input_field": "messages", "openai.model": "gpt-4o", "openai.api": "ChatCompletion", "output_path": "$.choices[0].message.content", "openai.max_tokens": 300, "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "tags": {"DEFAULT": ["EXTRACTIONS", "HIDDEN"]}, "openai.top_p": 1, "openai.service": "ws://blue_service_openai:8001", "schema": {}, "openai.frequency_penalty": 0, "input_context_field": "content", "input_context": "$[0]", "input_template": "You are an expert in intent classification and information extraction. Please identify the intent of the below user text and classify it into one of the below specified possible intents. Respond only with JSON in the following format, nothing else. JSON response format: {\"intent\": \"investigate\"}. Make sure the intent is an exact string match with one of the specified intents. ${input}", "openai.presence_penalty": 0, "input_json": "[{\"role\": \"user\"}]"}, "icon": null}, {"name": "OPENAI___EXPLAINER", "type": "agent", "scope": "/OPENAI", "description": "Explain a query result ", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-openai:latest", "input_field": "messages", "openai.model": "gpt-4o-mini", "openai.api": "ChatCompletion", "output_path": "$.choices[0].message.content", "openai.max_tokens": 300, "tags": {"DEFAULT": ["EXPLANATION"]}, "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "openai.service": "ws://blue_service_openai:8001", "schema": {}, "input_context_field": "content", "input_json": "[{\"role\":\"user\"}]", "openai.stop": ["#", ";"], "input_template": "Given a question expressed in natural language and its corresponding sql query, along with the result of the query as below in JSON, explain the results. Return only result in natural language\n ${input}", "openai.top_p": 1, "openai.frequency_penalty": 0, "input_context": "$[0]", "openai.presence_penalty": 0, "display_name": "OpenAI Query Explainer Agent", "system_agent": false}, "icon": null}, {"name": "OPENAI___HILITER", "type": "agent", "scope": "/OPENAI", "description": "Simple document hiliter using OpenAI", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-openai:latest", "openai.model": "gpt-4o", "openai.max_tokens": 2000, "output_path": "$.choices[*].message.content", "tags": {"DEFAULT": ["DOC", "HIDDEN"]}, "input_field": "messages", "openai.api": "ChatCompletion", "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "openai.service": "ws://blue_service_openai:8001", "input_json": "[{\"role\": \"user\"}]", "openai.presence_penalty": 0, "input_context_field": "content", "input_template": "Given a markdown document and hilite topics in below JSON, generate an updated document in markdown format hiliting spans related to the topics in the document, return only the markdown document without explanations: ${input}", "input_context": "$[0]", "openai.top_p": 1, "openai.frequency_penalty": 0, "output_transformations": [{"transformation": "replace", "from": "```", "to": ""}, {"transformation": "replace", "from": "markdown", "to": ""}], "output_strip": true}, "icon": null}, {"name": "OPENAI___LABELER", "type": "agent", "scope": "/OPENAI", "description": "Label a cluster with provided set of features using OpenAI", "created_by": "RMKX3vPR7XhKHhy5eu7Av5nui2F2", "properties": {"image": "megagonlabs/blue-agent-openai:latest", "input_field": "messages", "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "openai.api": "ChatCompletion", "openai.model": "gpt-4o", "tags": {"DEFAULT": ["DOC", "HIDDEN"]}, "openai.max_tokens": 1000, "openai.service": "ws://blue_service_openai:8001", "input_template": "Your job is to give names to automatically generated clusters based on the distinctive features in each cluster. You will be given feature names and the relative presence of that feature in that cluster compared to the other clusters. The generated cluster names should be concise and distinct from each other. Respond only in valid JSON, in the following format: {\"0\": {\"label\": your_generated_label}, \"1\": {...}} where 0, 1, etc are the original cluster labels. ${input}", "openai.frequency_penalty": 0, "input_context_field": "content", "openai.top_p": 1, "output_path": "$.choices[*].message.content", "openai.presence_penalty": 0, "input_context": "$[0]", "output_strip": true, "output_transformations": [{"transformation": "replace", "from": "```", "to": ""}, {"transformation": "replace", "from": "markdown", "to": ""}], "input_json": "[{\"role\": \"user\"}]"}, "icon": null}, {"name": "OPENAI___LABELERMULTI", "type": "agent", "scope": "/OPENAI", "description": "Label a set of clusters with provided set of features using OpenAI", "created_by": "RMKX3vPR7XhKHhy5eu7Av5nui2F2", "properties": {"image": "megagonlabs/blue-agent-openai:latest", "tags": {"DEFAULT": ["DOC", "HIDDEN"]}, "openai.api": "ChatCompletion", "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "input_field": "messages", "openai.max_tokens": 750, "openai.service": "ws://blue_service_openai:8001", "openai.frequency_penalty": 0, "input_context_field": "content", "openai.model": "gpt-4o", "input_template": "Your job is to give names to automatically generated clusters based on the distinctive features in each cluster. However, we don't know how many clusters we should have. You will be given several different clustering results, each with a different number of clusters. Your task is to identify the clustering results that produce the most meaningful seperation between clusters. Think this through step by step, and choose the smallest number of clusters possible that still well represent the natural groups in the data. When you decide on your answer, give it as a valid JSON object in the following format: {\"0\": {\"label\": your_generated_label, \"1\": {...}} where 0, 1, etc are the original cluster labels. We will know how many clusters we should use by the number of entries in your JSON. You will be given feature names and the relative presence of that feature in that cluster compared to the other clusters. The generated cluster names should be concise and distinct from each other. ${input}", "openai.top_p": 1, "output_path": "$.choices[*].message.content", "output_strip": true, "input_context": "$[0]", "openai.presence_penalty": 0, "output_transformations": [{"transformation": "replace", "from": "```", "to": ""}, {"transformation": "replace", "from": "markdown", "to": ""}], "input_json": "[{\"role\": \"user\"}]", "openai.temperature": 1}, "icon": null}, {"name": "OPENAI___SUMMARIZER", "type": "agent", "scope": "/OPENAI", "description": "Summarize a cluster highlighting distinctive features", "created_by": "RMKX3vPR7XhKHhy5eu7Av5nui2F2", "properties": {"listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "openai.max_tokens": 700, "image": "megagonlabs/blue-agent-openai:latest", "input_context_field": "content", "openai.api": "ChatCompletion", "openai.service": "ws://blue_service_openai:8001", "input_template": "Several clusters have been generated on the user's data, given labels, and characterized with the most distinctive features of each cluster. Your task is to create 1-2 sentence descriptions of each cluster. Give your answer in valid JSON {\"cluster_label_0\": your_generated_description, \"cluster_label_1\": your_generated_description, ...}. You will be given the input in the format {\"cluster_label_0\": {\"cluster_size\": int, \"distinctive_features\": {\"feature_name\": feature_presence_relative_to_mean}}, \"cluster_label_1\": ...}. ${input}", "output_path": "$.choices[*].message.content", "input_field": "messages", "output_strip": true, "openai.frequency_penalty": 0, "input_json": "[{\"role\": \"user\"}]", "tags": {"DEFAULT": ["HIDDEN"]}}, "icon": null}, {"name": "PROMPT", "type": "input", "scope": "/OPENAI", "description": "text prompt as input", "created_by": null, "properties": {"type": "str", "optional": false, "default": null, "schema": null}, "icon": null}, {"name": "OUTPUT", "type": "output", "scope": "/OPENAI", "description": "generated text output", "created_by": null, "properties": {"type": "str", "optional": false, "default": null, "schema": null}, "icon": null}, {"name": "OPENAI___SEMANTIC_EXTRACTOR", "type": "agent", "scope": "/OPENAI", "description": "Uses OpenAI to extracts values given column names and descriptions, specified as a property (entities) below.", "created_by": "ycYtg6Xe9IRQy1ibcJNRHiv96Lk2", "properties": {"output_strip": true, "output_transformations": [{"transformation": "replace", "from": "```", "to": ""}, {"transformation": "replace", "from": "json", "to": ""}], "input_field": "messages", "openai.api": "ChatCompletion", "output_path": "$.choices[0].message.content", "image": "megagonlabs/blue-agent-openai:latest", "openai.top_p": 1, "openai.model": "gpt-4o-mini", "input_context": "$[0]", "output_cast": "json", "openai.max_tokens": 300, "input_template": "The user will provide the columns that need to be extracted and some relevant context.\n Your job is to extract a list of concise values for each of the column.\n The response should be valid JSON format with the fields. Do not add any extra explanation. If there was no information return an empty JSON format.\n Here is the user input: ${input}", "openai.service": "ws://blue_service_openai:8001", "openai.presence_penalty": 0, "entities": "name, company, date", "openai.frequency_penalty": 0, "openai.stop": ["#", ";"], "input_context_field": "content", "schema": {}, "input_json": "[{\"role\":\"user\"}]"}, "icon": null}, {"name": "OPENAI___SEMANTIC_FILTER", "type": "agent", "scope": "/OPENAI", "description": "Uses OpenAI to return a boolean value based on whether the input doc meets the specified filter condition.", "created_by": "ycYtg6Xe9IRQy1ibcJNRHiv96Lk2", "properties": {"openai.model": "gpt-4o-mini", "openai.api": "ChatCompletion", "openai.frequency_penalty": 0, "openai.top_p": 1, "openai.max_tokens": 300, "input_field": "messages", "input_json": "[{\"role\":\"user\"}]", "output_strip": true, "openai.service": "ws://blue_service_openai:8001", "openai.stop": ["#", ";"], "input_context": "$[0]", "schema": {}, "input_context_field": "content", "output_transformations": [{"transformation": "replace", "from": "```", "to": ""}, {"transformation": "replace", "from": "json", "to": ""}], "openai.presence_penalty": 0, "output_path": "$.choices[0].message.content", "output_cast": "json", "input_template": "The user will provide a claim and some relevant context.\n Your job is to determine whether the claim is true for the given context.\n The response should be valid JSON format  {filter_condition: bool}. Do not add any extra explanation. \n Here is the user input: ${input}"}, "icon": null}, {"name": "DATA", "type": "output", "scope": "/PRESENTER", "description": "form data in structured format (JSON)", "created_by": null, "properties": {"type": "json", "optional": false, "default": null, "schema": null}, "icon": null}, {"name": "NL2SQL___INPLAN", "type": "agent", "scope": "/NL2SQL", "description": "Extends NL2SQL for in plan use, excludes listening to the USER agent directly.", "created_by": "NhFy2jG4JCSJJz7cYbAm7HJ7Txk2", "properties": {"image": "megagonlabs/blue-agent-nl2sql:latest", "openai.service": "ws://blue_service_openai:8001", "openai.model": "gpt-4o", "tags": {"DEFAULT": ["HIDDEN"]}, "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "openai.max_tokens": 512, "openai.temperature": 0, "input_context_field": "content", "input_field": "messages", "output_cast": "json", "nl2q_valid_query_prefixes": ["SELECT"], "output_path": "$.choices[0].message.content", "nl2q_prompt": "Your task is to translate a natural language question into a SQL query based on a list of provided data sources. \nFor each source you will be provided with a list of table schemas that specify the columns and their types. \nHere are the requirements: \n- The output should be a JSON object with the following fields \n  - \"question\": the original natural language question \n  - \"source\": the name of the data source that the query will be executed on \n  - \"query\": the SQL query that is translated from the natural language question \n- The SQL query should be compatible with the schema of the datasource. \n- The SQL query should be compatible with the syntax of the corresponding database's protocol. Examples of protocol include \"mysql\" and \"postgres\". \n- Always do case-${sensitivity} matching for string comparison. \n- The query should starts with any of the following prefixes: ${force_query_prefixes} \n- Output the JSON directly. Do not generate explanation or other additional output. \n${translation_requirements} \nProtocol: \n${protocol} \nData sources: \n${sources} \nQuestion: ${question} \nOutput:", "input_template": "${nl2q_prompt}", "tracker.outputs": ["log.INFO"], "input_json": [{"role": "user"}], "openai.api": "ChatCompletion", "nl2q_force_query_prefixes": ["SELECT"], "output_strip": true, "input_context": "$[0]", "output_transformations": [{"transformation": "replace", "from": "```", "to": ""}, {"transformation": "replace", "from": "json", "to": ""}], "nl2q_case_insensitive": true, "nl2q_execute": true, "nl2q_source_database": null, "nl2q_discovery_source_protocols": ["postgres", "mysql"], "nl2q_source": null, "nl2q_translation_requirements": [], "nl2q_discovery": true, "nl2q_discovery_similarity_threshold": 0.65}, "icon": null}, {"name": "OPENAI___CLASSIFIER", "type": "agent", "scope": "/openai_classifier_testing", "description": "string", "created_by": null, "properties": {"listens": {"DEFAULT": {"includes": ["USER"], "excludes": []}}, "tags": {"DEFAULT": ["EXTRACTIONS"]}}, "icon": null}, {"name": "QUERYEXECUTOR", "type": "agent", "scope": "/summarizer_bruteforce_testing", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "NL2SQL___INPLAN", "type": "agent", "scope": "/summarizer_bruteforce_testing", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "COORDINATOR", "type": "agent", "scope": "/summarizer_bruteforce_testing", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "SUMMARIZER___BRUTEFORCE", "type": "agent", "scope": "/summarizer_bruteforce_testing", "description": "string", "created_by": null, "properties": {"listens": {"DEFAULT": {"includes": ["USER"], "excludes": []}}, "JOB_POSTING_ID": 2003}, "icon": null}, {"name": "SUMMARIZER___RECENTP2", "type": "agent", "scope": "/SUMMARIZER", "description": "Summarize recent candidates for job with {$JOB_POSTING_ID} from session context", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-summarizer:latest", "openai.max_tokens": 512, "openai.model": "gpt-4o", "input_context": "$[0]", "openai.temperature": 0, "output_path": "$.choices[0].message.content", "input_template": "Role:\n* You are a recruiter and need to assess job seeker for their best fit for a job. \n\nTone and Style:\n* Maintain a clear, direct, friendly, and professional tone.\n* Write at an 8th grade reading level or below.\n\nTarget audience:\n* Hiring Managers\n\nSummary Length:\n* 1 paragraphs of 2 sentence each \n\nAlternative Phrases:\n* don't say 'job seeker id' instead say 'job seeker'\n* don't say 'required skill' instead say 'skill'\n\nProhibited Phrases:\n* avoid phrases like '<LOCATION>'\n\nObjective: \nI need you to summarize in easy to understand english for the hiring manager the facts I will provide about the group of job seekers. \n\nSteps:\nStep1. Field explanation\nPlease use the following explanation of fields in the data:\n* job_seeker_id - job_seeker_id is the id of the job seeker\n\nStep2. job seeker data\nPlease use the following job seeker data:\n{$input}\n\nStep3. Assess the job seekers\nUse the following steps\nStep3d. 'most common skill' - find the most common 3 job_seeker_skills\nStep3d. 'most common skill missing' - find the most common 3 job_seeker_skills_missing\nStep3g. 'most unique job seekers' - find the job seeker which has skills that other job seekers do not have and explain your answer\n\nStep4. Summary Construction:\n* Template Use: Follow the provided template to maintain a consistent structure:\n```\n[1 paragraph summarizing 'most common skill' & 'most common skill missing' & 'most unique job seekers']\n'''\n", "input_context_field": "content", "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "template": "Please use the following job seeker data:\n * job_seeker_skills - job_seeker_skills are the skills that the job seekers have which match the job they are applying for\n{$job_seekers_skill}\n* job_seeker_skills_missing - job_seeker_skills are the skills that the job seekers do not have but are required by the job they are applying for\n{$job_seeker_skills_missing}", "input_field": "messages", "openai.api": "ChatCompletion", "openai.service": "ws://blue_service_openai:8001", "queries": {"job_seekers_count": {"source": "/employer_postgres/employer/public", "query": "SELECT COUNT(DISTINCT job_seeker_id) from matched_job_posting_seeker_skills where job_posting_id = ${JOB_POSTING_ID} and job_seeker_id in (${input})"}, "job_seekers_skill": {"source": "/employer_postgres/employer/public", "query": "SELECT job_seeker_id, job_posting_skill from matched_job_posting_seeker_skills where job_posting_id = ${JOB_POSTING_ID} and job_seeker_id in (${input}) and  job_seeker_has_skill = true and job_posting_must_have_skill = true"}, "job_seeker_skills_missing": {"source": "/employer_postgres/employer/public", "query": "SELECT job_seeker_id, job_posting_skill from matched_job_posting_seeker_skills where job_posting_id = ${JOB_POSTING_ID} and job_seeker_id in (${input}) and job_seeker_has_skill = false and job_posting_must_have_skill = true"}}}, "icon": null}, {"name": "SUMMARIZER___RECENTP3", "type": "agent", "scope": "/SUMMARIZER", "description": "Summarize recent candidates for job with {$JOB_POSTING_ID} from session context", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-summarizer:latest", "template": "Please use the following job seeker data:\n * job_seeker_skills - job_seeker_skills are the skills that the job seekers have which match the job they are applying for\n{$job_seekers_skill}\n* job_seeker_skills_missing - job_seeker_skills are the skills that the job seekers do not have but are required by the job they are applying for\n{$job_seeker_skills_missing}\n* job_seeker_years_of_experience - job_seeker_years_of_experience are the years of working experience the job seekers has completed\n{$job_seeker_years_of_experience} ", "input_context_field": "content", "input_template": "Role:\n* You are a recruiter and need to assess job seeker for their best fit for a job. \n\nTone and Style:\n* Maintain a clear, direct, friendly, and professional tone.\n* Write at an 8th grade reading level or below.\n\nTarget audience:\n* Hiring Managers\n\nSummary Length:\n* 1 paragraphs of 2 sentence each \n\nAlternative Phrases:\n* dont say 'job seeker id' instead say 'job seeker'\n* dont say 'required skill' instead say 'skill'\n\nProhibited Phrases:\n* avoid phrases like '<LOCATION>'\n\nObjective: \nI need you to summarize in easy to understand english for the hiring manager the facts I will provide about the group of job seekers. \n\nSteps:\n\nStep1. Field explanation\nPlease use the following explanation of fields in the data:\n* job_seeker_id - job_seeker_id is the id of the job seeker\n* job_seeker_years_of_experience - job_seeker_years_of_experience are the years of working experience the job seekers has completed \n\nStep2. job seeker data\nPlease use the following job seeker data:\n{$input}\n\nStep3. Assess the job seekers\nUse the following steps\nStep3h. 'best job seeker explanation' - find the best job seeker. first prioritize job_seeker_skills data. Second prioritize job_seeker_years_of_experience data. Third explain your rational.  \nStep3i. 'best job seeker missing skills' - find the best job seeker and their missing skills\n\nStep4. Summary Construction:\n* Template Use: Follow the provided template to maintain a consistent structure:\n```\n[1 paragraph summarizing  & 'best job seeker'  & 'best job seeker explanation' & 'best job seeker missing skills']\n'''\n", "openai.max_tokens": 512, "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "openai.api": "ChatCompletion", "output_path": "$.choices[0].message.content", "input_context": "$[0]", "openai.service": "ws://blue_service_openai:8001", "openai.model": "gpt-4o", "openai.temperature": 0, "queries": {"job_seekers_count": {"source": "/employer_postgres/employer/public", "query": "SELECT COUNT(DISTINCT job_seeker_id) from matched_job_posting_seeker_skills where job_posting_id = ${JOB_POSTING_ID} and job_seeker_id in (${input})"}, "job_seekers_skill": {"source": "/employer_postgres/employer/public", "query": "SELECT job_seeker_id, job_posting_skill from matched_job_posting_seeker_skills where job_posting_id = ${JOB_POSTING_ID} and job_seeker_id in (${input}) and  job_seeker_has_skill = true and job_posting_must_have_skill = true"}, "job_seeker_skills_missing": {"source": "/employer_postgres/employer/public", "query": "SELECT job_seeker_id, job_posting_skill from matched_job_posting_seeker_skills where job_posting_id = ${JOB_POSTING_ID} and job_seeker_id in (${input}) and job_seeker_has_skill = false and job_posting_must_have_skill = true"}, "job_seeker_years_of_experience": {"source": "/employer_postgres/employer/public", "query": "SELECT  job_seeker_id, job_seeker_years_of_experience from job_seeker_years_of_experience where job_seeker_id in (${input})"}}, "input_field": "messages"}, "icon": null}, {"name": "SUMMARIZER___RECENTP1", "type": "agent", "scope": "/SUMMARIZER", "description": "Summarize recent candidates for job with {$JOB_POSTING_ID} from session context", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-summarizer:latest", "openai.max_tokens": 512, "output_path": "$.choices[0].message.content", "template": "Please use the following job seeker data:\n{$job_seekers_count} \n{$job_seekers_skill} ", "openai.temperature": 0, "input_field": "messages", "input_context": "$[0]", "openai.model": "gpt-4o", "input_template": "Role:\n* You are a recruiter and need to assess job seeker for their best fit for a job. \n\nTone and Style:\n* Maintain a clear, direct, friendly, and professional tone.\n* Write at an 8th grade reading level or below.\n\nTarget audience:\n* Hiring Managers\n\nSummary Length:\n* 1 paragraphs of 2 sentence each \n\nAlternative Phrases:\n* dont say 'job seeker id' instead say 'job seeker'\n* dont say 'required skill' instead say 'skill'\n\nProhibited Phrases:\n* avoid phrases like '<LOCATION>'\n\nObjective: \nI need you to summarize in easy to understand english for the hiring manager the facts I will provide about the group of job seekers. \n\nSteps:\n\nStep1. Field explanation\nPlease use the following explanation of fields in the data:\n* 'job_seeker_count' - report the number of job seekers. \n* job_seeker_id - job_seeker_id is the id of the job seeker\n* job_seeker_skill - job_seeker_skills are skills that the job seekers has which match the job they are applying for\n\nStep2. job seeker data\nPlease use the following job seeker data:\n{$input}\n\nStep3. Assess the job seekers\nUse the following steps\nStep3a. 'job seeker count' - report the number of job seekers. \nStep3b. 'job seeker similarity' - find the similarities between job seekers\nstep3e. 'most similar job seekers explanation' - find a group of maximum 3 job seekers who are the most similar and explain your rational \nStep3f. 'most different job seekers explanation' - find a group of maximum 3 job seekers who are the most different to the rest of the job seekers explain your rational\n\nStep4. Summary Construction:\n* Template Use: Follow the provided template to maintain a consistent structure:\n```\n Here\u2019s the analysis of recent job seekers for your posting \n\n[1 paragraph summarizing 'most similar job seekers explanation' & 'most different job seekers explanation']\n'''\n", "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "input_context_field": "content", "openai.service": "ws://blue_service_openai:8001", "openai.api": "ChatCompletion", "queries": {"job_seekers_count": {"source": "/employer_postgres/employer/public", "query": "SELECT COUNT(DISTINCT job_seeker_id) from matched_job_posting_seeker_skills where job_posting_id = ${JOB_POSTING_ID} and job_seeker_id in (${input})"}, "job_seekers_skill": {"source": "/employer_postgres/employer/public", "query": "SELECT job_seeker_id, job_posting_skill from matched_job_posting_seeker_skills where job_posting_id = ${JOB_POSTING_ID} and job_seeker_id in (${input}) and  job_seeker_has_skill = true and job_posting_must_have_skill = true"}}}, "icon": null}, {"name": "SUMMARIZER___RECENT", "type": "agent", "scope": "/SUMMARIZER", "description": "Summarizes recent candidates for job with {$JOB_POSTING_ID} from session context, producing three paragraphs highlighting similar and different job seekers, common and unique skills, and best job seeker", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-summarizer:latest", "openai.max_tokens": 512, "input_field": "messages", "input_template": "Role:\n* You are a recruiter and need to assess job seeker for their best fit for a job. \n\nTone and Style:\n* Maintain a clear, direct, friendly, and professional tone.\n* Write at an 8th grade reading level or below.\n\nTarget audience:\n* Hiring Managers\n\nSummary Length:\n* 4 paragraphs of 2 sentence each \n\nAlternative Phrases:\n* don't say 'job seeker id' instead say 'job seeker'\n* don't say 'required skill' instead say 'skill'\n\nProhibited Phrases:\n* avoid phrases like '<LOCATION>'\n\nObjective: \nI need you to summarize in easy to understand english for the hiring manager the facts I will provide about the group of job seekers. \n\nSteps:\n\nStep1. Field explanation\nPlease use the following explanation of fields in the data:\n* job_seeker_id - job_seeker_id is the id of the job seeker\n* job_seeker_skills - job_seeker_skills are skills that the job seekers has which match the job they are applying for\n* job_seeker_skills_missing - job_seeker_skills are the skills that the job seekers do not have but are required by the job they are applying for\n* job_seeker_years_of_experience - job_seeker_years_of_experience are the years of working experience the job seekers has completed \n* job_seeker_sectors - job_seeker_sectors are the sectors that the job seekers has worked in which match the sector of the job\n\nStep2. job seeker data\nPlease use the following job seeker data:\n{$input}\n\nStep3. Assess the job seekers\nUse the following steps\nStep3a. 'job seeker count' - report the number of job seekers. Step3b. 'job seeker similarity' - find the similarities between job seekers\nStep3c. 'job seeker differences' - find the differences between job seekers\nStep3d. 'most common skill' - find the most common job_seeker_skills\nStep3d. 'most common skill gap' - find the most common job_seeker_skills_missing\nstep3e. 'most similar job seekers explanation' - find a group of maximum 3 job seekers who are the most similar and explain your rational \nStep3f. 'most different job seekers explanation' - ind a group of maximum 3 job seekers who are the most different to the rest of the job seekers explain your rational\nStep3g. 'most unique job seekers' - find the most unique job seekers\nStep3h. 'best job seeker explanation' - find the best job seeker. first prioritize job_seeker_skills data. Second prioritize job_seeker_years_of_experience data. Third prioritize job_seeker_sectors data and explain your rational.  \nStep3i. 'best job seeker missing skills' - find the best job seeker and their missing skills\n\nStep4. Summary Construction:\n* Template Use: Follow the provided template to maintain a consistent structure:\n```\n Here\u2019s the analysis of recent job seekers for your posting \n\n[1 paragraph summarizing 'most similar job seekers explanation' & 'most different job seekers explanation']\n\n[1 paragraph summarizing 'most common skill' & 'most common skill gap' & 'most unique job seekers']\n\n[1 paragraph summarizing  & 'best job seeker'  & 'best job seeker explanation' & 'best job seeker missing skills']```\n", "template": "Please use the following job seeker data:\n{$job_seekers_count} \n{$job_seekers_skill} \n{$job_seeker_skills_missing}\n{$job_seeker_years_of_experience}", "openai.temperature": 0, "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "output_path": "$.choices[0].message.content", "input_context_field": "content", "openai.service": "ws://blue_service_openai:8001", "openai.model": "gpt-4o", "input_context": "$[0]", "openai.api": "ChatCompletion", "queries": {"job_seekers_count": {"source": "/employer_postgres/employer/public", "query": "SELECT COUNT(DISTINCT job_seeker_id) from matched_job_posting_seeker_skills where job_posting_id = ${JOB_POSTING_ID} and job_seeker_id in (${input})"}, "job_seekers_skill": {"source": "/employer_postgres/employer/public", "query": "SELECT job_seeker_id, job_posting_skill from matched_job_posting_seeker_skills where job_posting_id = ${JOB_POSTING_ID} and job_seeker_id in (${input}) and  job_seeker_has_skill = true and job_posting_must_have_skill = true"}, "job_seeker_skills_missing": {"source": "/employer_postgres/employer/public", "query": "SELECT  job_seeker_id, job_posting_skill from matched_job_posting_seeker_skills where job_posting_id = ${JOB_POSTING_ID} and job_seeker_id in (${input}) and  job_seeker_has_skill = false and job_posting_must_have_skill = true"}, "job_seeker_years_of_experience": {"source": "/employer_postgres/employer/public", "query": "SELECT  job_seeker_id, job_seeker_years_of_experience from job_seeker_years_of_experience where job_seeker_id in (${input})"}, "job_seeker_sectors": {"source": "/employer_postgres/employer/public", "query": "SELECT  job_seeker_id, job_posting_sector from matched_job_posting_seeker_sectors where job_posting_id = ${JOB_POSTING_ID} and job_seeker_id in (${input}) and  matched_sector = true"}}}, "icon": null}, {"name": "SUMMARIZER___LIST", "type": "agent", "scope": "/SUMMARIZER", "description": "Summarize a list of candidates for job with {$JOB_POSTING_ID} from session context", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"input_template": "Role:\n* You are a recruiter and need to assess job seeker for their best fit for a job. \n\nTone and Style:\n* Maintain a clear, direct, friendly, and professional tone.\n* Write at an 8th grade reading level or below.\n\nTarget audience:\n* Hiring Managers\n\nSummary Length:\n* 4 paragraphs of 2 sentence each \n\nAlternative Phrases:\n* don't say 'job seeker id' instead say 'job seeker'\n* don't say 'required skill' instead say 'skill'\n\nProhibited Phrases:\n* avoid phrases like '<LOCATION>'\n\nObjective: \nI need you to summarize in easy to understand english for the hiring manager the facts I will provide about the group of job seekers. \n\nSteps:\n\nStep1. Field explanation\nPlease use the following explanation of fields in the data:\n* job_seeker_id - job_seeker_id is the id of the job seeker\n* job_seeker_skills - job_seeker_skills are skills that the job seekers has which match the job they are applying for\n* job_seeker_skills_missing - job_seeker_skills are the skills that the job seekers do not have but are required by the job they are applying for\n* job_seeker_years_of_experience - job_seeker_years_of_experience are the years of working experience the job seekers has completed \n* job_seeker_sectors - job_seeker_sectors are the sectors that the job seekers has worked in which match the sector of the job\n\nStep2. job seeker data\nPlease use the following job seeker data:\n{$input}\n\nStep3. Assess the job seekers\nUse the following steps\nStep3a. 'job seeker similarity' - find the similarities between job seekers\nStep3b. 'job seeker differences' - find the differences between job seekers\nStep3c. 'most common skill' - find the most common job_seeker_skills\nStep3d. 'most common skill gap' - find the most common job_seeker_skills_missing\nstep3e. 'most similar job seekers explanation' - find a group of maximum 3 job seekers who are the most similar and explain your rational \nStep3f. 'most different job seekers explanation' - ind a group of maximum 3 job seekers who are the most different to the rest of the job seekers explain your rational\nStep3g. 'most unique job seekers' - find the most unique job seekers\nStep3h. 'best job seeker explanation' - find the best job seeker. first prioritize job_seeker_skills data. Second prioritize job_seeker_years_of_experience data. Third prioritize job_seeker_sectors data and explain your rational.  \nStep3i. 'best job seeker missing skills' - find the best job seeker and their missing skills\n\nStep4. Summary Construction:\n* Template Use: Follow the provided template to maintain a consistent structure:\n```\nOK. Here\u2019s the analysis of job seekers... \n\n[1 paragraph summarizing 'most similar job seekers explanation' & 'most different job seekers explanation']\n\n[1 paragraph summarizing 'most common skill' & 'most common skill gap' & 'most unique job seekers']\n\n[1 paragraph summarizing  & 'best job seeker'  & 'best job seeker explanation' & 'best job seeker missing skills']```\n", "input_field": "messages", "template": "Please use the following job seeker data:\n{$job_seekers_skill} \n{$job_seeker_skills_missing}\n{$job_seeker_years_of_experience}", "image": "megagonlabs/blue-agent-summarizer:latest", "output_path": "$.choices[0].message.content", "queries": {"job_seekers_skill": {"source": "/employer_postgres/employer/public", "query": "select job_seeker_id, job_posting_skill from matched_job_posting_seeker_skills where job_posting_id = ${JOB_POSTING_ID} and job_seeker_id in (${input}) and  job_seeker_has_skill = true and job_posting_must_have_skill = true"}, "job_seeker_skills_missing": {"source": "/employer_postgres/employer/public", "query": "select  job_seeker_id, job_posting_skill from matched_job_posting_seeker_skills where job_posting_id = ${JOB_POSTING_ID} and job_seeker_id in (${input}) and  job_seeker_has_skill = false and job_posting_must_have_skill = true"}, "job_seeker_years_of_experience": {"source": "/employer_postgres/employer/public", "query": "select  job_seeker_id, job_seeker_years_of_experience from job_seeker_years_of_experience where job_seeker_id in (${input})"}, "job_seeker_sectors": {"source": "/employer_postgres/employer/public", "query": "select  job_seeker_id, job_posting_sector from matched_job_posting_seeker_sectors where job_posting_id = ${JOB_POSTING_ID} and job_seeker_id in (${input}) and  matched_sector = true"}}, "openai.api": "ChatCompletion", "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "openai.service": "ws://blue_service_openai:8001", "openai.temperature": 0, "openai.max_tokens": 512, "input_context_field": "content", "openai.model": "gpt-4o", "input_context": "$[0]"}, "icon": null}, {"name": "CLUSTERER___JOBSEEKER", "type": "agent", "scope": "/CLUSTERER", "description": "", "created_by": "RMKX3vPR7XhKHhy5eu7Av5nui2F2", "properties": {"image": "megagonlabs/blue-agent-clusterer:latest", "cluster_config": {"num_clusters": 4, "cluster_size_options": [2, 3, 4, 5, 7], "auto_cluster_method": "llm", "exclude_columns": ["total_resume"]}, "embeddings_config": {"use_embeddings": false, "embeding_cols": [], "encoder_name": "Alibaba-NLP/gte-Qwen2-1.5B-instruct"}, "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "create_visualization": false, "data": {"query": {"source": "/employer_postgres/employer/public", "query": "WITH seeker_resume AS (SELECT job_seeker_id, STRING_AGG(CAST(experience_id AS TEXT) || ' ' || job_seeker_company || ' ' || job_seeker_title || ' ' || resume_text, ' ') as total_resume FROM job_seeker GROUP BY job_seeker_id), latest_management AS (SELECT DISTINCT ON (job_seeker_id) job_seeker_id, management_level FROM job_seeker_belongs_to_management_level ORDER BY job_seeker_id, experience_id DESC) SELECT sr.job_seeker_id, sr.total_resume, lm.management_level, s.skill FROM seeker_resume sr INNER JOIN latest_management lm ON sr.job_seeker_id = lm.job_seeker_id INNER JOIN job_seeker_has_skills s ON sr.job_seeker_id = s.job_seeker_id inner join job_seeker_applied_to_job_posting jsajp on jsajp.job_seeker_id = s.job_seeker_id where jsajp.job_posting_id = ${JOB_POSTING_ID};"}}, "id_columns": ["job_seeker_id"], "create_cluster_labels": true, "create_cluster_descriptions": true, "summarization_context": "These descriptions will be used by recruiters to understand which applicants to focus on, so avoid technical terms such \"cluster\" and \"features\". ", "tags": {"CLUSTER_INFO": ["HIDDEN"], "CLUSTER_MAPPINGS": ["HIDDEN"]}}, "icon": null}, {"name": "OPENAI___LABELER", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "OPENAI___SUMMARIZER", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "DOCUMENTER___JOBSEEKER", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "OPENAI___HILITER", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "QUERYEXECUTOR", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "VISUALIZER___SKILLS", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "VISUALIZER___SKILLBYCANDIDATE", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "VISUALIZER___YOE", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "NL2SQL___INPLAN", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "OPENAI___CLASSIFIER", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "OPENAI___EXPLAINER", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "COORDINATOR", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "AGENTICEMPLOYER", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "SUMMARIZER___RECENT", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "SUMMARIZER___RECENTP1", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "SUMMARIZER___RECENTP2", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "SUMMARIZER___RECENTP3", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "SUMMARIZER___LIST", "type": "agent", "scope": "/agentic_employer", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "QUERYEXECUTOR___INTERACTIVE", "type": "agent", "scope": "/QUERYEXECUTOR", "description": "executes a query on data source from user interaction", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "blue-agent-query_executor:latest", "listens": {"DEFAULT": {"includes": ["USER"], "excludes": []}}, "tags": {"DEFAULT": []}}, "icon": null}, {"name": "VISUALIZER___SKILLALL", "type": "agent", "scope": "/VISUALIZER", "description": "Visualize all skills for applicants given ${JOB_POSTING_ID}", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-visualizer", "template": "{\"$schema\":\"https://vega.github.io/schema/vega-lite/v5.json\",\"description\":\"${description}\",\"title\":{\"text\":[\"Job Seeker Skills Overview (JD: ${JOB_POSTING_ID})\"],\"align\":\"center\"},\"data\":{\"values\":${skills}},\"mark\":\"circle\",\"encoding\":{\"x\":{\"bin\":{\"maxbins\":25},\"field\":\"duration_in_months\",\"title\":\"Duration (months)\"},\"y\":{\"field\":\"skill\",\"title\":\"Required Skills\"},\"size\":{\"aggregate\":\"count\",\"title\":\"Number of Job Seekers\"}}}", "description": "Description", "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "y_title": "Skills", "x_title": "Duration Binned", "queries": {"skills": {"source": "/employer_postgres/employer/public", "query": "SELECT * FROM job_seeker_has_skills WHERE job_seeker_id IN (${input})"}}}, "icon": null}, {"name": "VISUALIZER___SKILLS", "type": "agent", "scope": "/VISUALIZER", "description": "visualize SKILLS for applicants given ${JOB_POSTING_ID}", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-visualizer", "y_title": "Skills", "x_title": "Duration Binned", "template": "{\"$schema\":\"https://vega.github.io/schema/vega-lite/v5.json\",\"description\":\"${description}\",\"title\":{\"text\":[\"Job Seeker Skills Overview (JD: ${JOB_POSTING_ID})\"],\"align\":\"center\"},\"data\":{\"values\":${skills}},\"mark\":\"circle\",\"encoding\":{\"x\":{\"bin\":{\"maxbins\":25},\"field\":\"duration_in_months\",\"title\":\"Duration (months)\"},\"y\":{\"field\":\"skill\",\"title\":\"Required Skills\"},\"size\":{\"aggregate\":\"count\",\"title\":\"Number of Job Seekers\"}}}", "description": "Description", "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "queries": {"skills": {"source": "/employer_postgres/employer/public", "query": "SELECT * FROM job_seeker_has_skills WHERE job_seeker_id IN (${input}) AND skill in (SELECT job_posting_skill FROM matched_job_posting_seeker_skills WHERE job_posting_id=${JOB_POSTING_ID}) "}}}, "icon": null}, {"name": "VISUALIZER___SKILLBYCANDIDATE", "type": "agent", "scope": "/VISUALIZER", "description": "visualize SKILLS for applicants given ${JOB_POSTING_ID}", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-visualizer", "queries": {"skills": {"source": "/employer_postgres/employer/public", "query": "SELECT jshs.job_seeker_id, jshs.skill, jshs.duration_in_months FROM job_seeker_has_skills jshs  JOIN (SELECT job_seeker_id, COUNT(*) as skill_count FROM matched_job_posting_seeker_skills WHERE job_posting_id = ${JOB_POSTING_ID} AND job_posting_must_have_skill = true AND job_seeker_has_skill = true GROUP BY job_seeker_id ORDER BY skill_count DESC LIMIT 100) mjpss ON jshs.job_seeker_id = mjpss.job_seeker_id WHERE jshs.job_seeker_id IN (${input}) AND jshs.skill in (SELECT job_posting_skill FROM matched_job_posting_seeker_skills WHERE job_posting_id=${JOB_POSTING_ID}) ORDER BY skill_count"}}, "description": "Description", "x_title": "Duration Binned", "y_title": "Skills", "chart_title": "Required Skills by Job Seeker (JD: ${JOB_POSTING_ID})", "template": "{\"$schema\":\"https://vega.github.io/schema/vega-lite/v5.json\",\"description\":\"${description}\",\"title\":{\"text\":[\"Required Skills by Job Seeker (JD: ${JOB_POSTING_ID})\"],\"align\":\"center\"},\"data\":{\"values\":${skills}},\"mark\":\"circle\",\"encoding\":{\"x\":{\"field\":\"job_seeker_id\",\"title\":\"Job Seeker\"},\"y\":{\"field\":\"skill\",\"title\":\"Required Skills\"},\"size\":{\"bin\": true,\"field\":\"duration_in_months\",\"title\":\"Duration (months)\"}}}", "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}}, "icon": null}, {"name": "VISUALIZER___YOE", "type": "agent", "scope": "/VISUALIZER", "description": "Visualize years of experience for applicants given ${JOB_ID}", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-visualizer", "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "description": "Description", "queries": {"yoe": {"source": "/employer_postgres/employer/public", "query": "SELECT * FROM job_seeker_years_of_experience WHERE job_seeker_id IN (${input})"}}, "template": "{\"$schema\":\"https://vega.github.io/schema/vega-lite/v5.json\",\"description\":\"${description}\",\"title\":{\"text\":[\"Applies by Years of Experience (JD: ${JOB_ID})\"],\"align\":\"center\"},\"data\":{\"values\":${yoe}},\"mark\":\"bar\",\"encoding\":{\"x\":{\"field\":\"job_seeker_years_of_experience\",\"type\":\"quantitative\",\"axis\":{\"labelAngle\":0},\"title\":\"${x_title}\"},\"y\":{\"field\":\"job_seeker_count\",\"type\":\"quantitative\",\"title\":\"${y_title}\"}}}", "x_title": "YOE", "y_title": "Y"}, "icon": null}, {"name": "DOCUMENTER___JOBSEEKER", "type": "agent", "scope": "/DOCUMENTER", "description": "Construct a resume from queries and highlights spans relevant to required skills in the applied job", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-documenter", "hilite": "skills such as {% for must_have_skill in must_have_skills %} {{must_have_skill.skill}}, {% endfor %}", "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "questions": {}, "template": "{% for job_seeker in job_seekers %} ## Resume ({{job_seeker.job_seeker_id}})\n### Skills \n {% for job_seeker_skill_pair in job_seeker_skills %} {% if job_seeker_skill_pair.job_seeker_id == job_seeker.job_seeker_id %} {{ job_seeker_skill_pair.skill }}, {% endif %} {% endfor %} \n ### Work Experience \n {% for experience in experiences %} {% if experience.job_seeker_id == job_seeker.job_seeker_id %} \n#### {{experience.job_seeker_title}}, {{experience.job_seeker_company}} \n {{experience.resume_text|replace(\"\u2022\", \"\")|replace(\"\n\n\", \"\n\")|replace(\"\t\", \"\")}} {% endif %} {% endfor %} {% endfor %}", "queries": {"job_seekers": {"source": "/employer_postgres/employer/public", "query": "SELECT DISTINCT(job_seeker_id) FROM job_seeker WHERE job_seeker_id IN (${input})"}, "experiences": {"source": "/employer_postgres/employer/public", "query": "SELECT * FROM job_seeker  WHERE job_seeker_id IN (${input}) ORDER BY experience_id"}, "job_seeker_skills": {"source": "/employer_postgres/employer/public", "query": "SELECT job_seeker_id, skill FROM job_seeker_has_skills  WHERE job_seeker_id IN (${input})"}, "must_have_skills": {"source": "/employer_postgres/employer/public", "query": "SELECT skill FROM job_posting_requires_skills  WHERE job_posting_id = ${JOB_POSTING_ID}"}}}, "icon": null}, {"name": "DOCUMENTER___JD", "type": "agent", "scope": "/DOCUMENTER", "description": "Constructs a job description document and highlights spans relevant to required skills", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"image": "megagonlabs/blue-agent-documenter", "queries": {"jds": {"source": "/employer_postgres/employer/public", "query": "SELECT * FROM job_posting  WHERE job_posting_id = ${JOB_POSTING_ID}"}, "must_have_skills": {"source": "/employer_postgres/employer/public", "query": "SELECT skill FROM job_posting_requires_skills  WHERE job_posting_id = ${JOB_POSTING_ID}"}}, "listens": {"DEFAULT": {"includes": [], "excludes": ["USER"]}}, "questions": {}, "hilite": "skills such as {% for must_have_skill in must_have_skills %} {{must_have_skill.skill}}, {% endfor %}", "template": "{% for jd in jds %} \n### {{jd.job_posting_title}}, {{jd.job_posting_company}} \n {{jd.job_posting_description}}  {% endfor %}"}, "icon": null}, {"name": "DOCUMENTER___TEST", "type": "agent", "scope": "/DOCUMENTER", "description": "", "created_by": "5WgRzdacRdOEvj8JBmCXFZSvWmH3", "properties": {"system_agent": false, "template": "There are $num_jobs many jobs", "queries": {"num_jobs": {"source": "/job_search_postgres/postgres/public", "query": "SELECT COUNT(*) from jobs"}}, "hilite": "engineering jobs", "image": "megagonlabs/blue-agent-documenter", "questions": {}, "listens": {"DEFAULT": {"includes": ["USER"], "excludes": []}}}, "icon": null}, {"name": "NL2SQL", "type": "agent", "scope": "/nl2sql_testing", "description": "string", "created_by": null, "properties": {"nl2q.source": "employer_postgres"}, "icon": null}, {"name": "QUERYEXECUTOR", "type": "agent", "scope": "/summarizer_recent_testing", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "NL2SQL___INPLAN", "type": "agent", "scope": "/summarizer_recent_testing", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "COORDINATOR", "type": "agent", "scope": "/summarizer_recent_testing", "description": "string", "created_by": null, "properties": {}, "icon": null}, {"name": "SUMMARIZER___RECENT", "type": "agent", "scope": "/summarizer_recent_testing", "description": "string", "created_by": null, "properties": {"listens": {"DEFAULT": {"includes": ["USER"], "excludes": []}}, "JOB_POSTING_ID": 2003}, "icon": null}, {"name": "OPENAI___EXTRACTOR", "type": "agent", "scope": "/DialogManagerGroup", "description": "", "created_by": null, "properties": {}, "icon": null}, {"name": "OPENAI___ROGUEAGENT", "type": "agent", "scope": "/DialogManagerGroup", "description": "", "created_by": null, "properties": {}, "icon": null}, {"name": "COORDINATOR", "type": "agent", "scope": "/DialogManagerGroup", "description": "", "created_by": null, "properties": {}, "icon": null}, {"name": "OPENAI___CLASSIFIER", "type": "agent", "scope": "/DialogManagerGroup", "description": "", "created_by": null, "properties": {}, "icon": null}, {"name": "QUERYEXECUTOR", "type": "agent", "scope": "/DialogManagerGroup", "description": "", "created_by": null, "properties": {}, "icon": null}, {"name": "OPENAI___SUMMARIZER", "type": "agent", "scope": "/DialogManagerGroup", "description": "", "created_by": null, "properties": {}, "icon": null}, {"name": "DialogManager", "type": "agent", "scope": "/DialogManagerGroup", "description": "", "created_by": null, "properties": {}, "icon": null}, {"name": "NL2SQL___INPLAN", "type": "agent", "scope": "/DialogManagerGroup", "description": "", "created_by": null, "properties": {}, "icon": null}]